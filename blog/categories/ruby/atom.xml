<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My Adventure Through Code]]></title>
  <link href="http://carlosplusplus.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://carlosplusplus.github.io/"/>
  <updated>2014-02-01T01:03:30-05:00</updated>
  <id>http://carlosplusplus.github.io/</id>
  <author>
    <name><![CDATA[Carlos Lazo]]></name>
    <email><![CDATA[carlos.jose.lazo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Rake Tasks with RSpec]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/"/>
    <updated>2014-02-01T08:00:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec</id>
    <content type="html"><![CDATA[<p>One of the projects I&rsquo;m currently supporting at work involves migrating an entire database from the <a href="http://www.oracle.com/index.html">Oracle</a> framework to the <a href="http://www.mongodb.org/">MongoDB</a> framework. This Rails application is crucial in that it serves as one of the primary JSON APIs for my company&rsquo;s web services.</p>

<p>My colleagues had written an import task which will takes the (deprecated) Oracle versions of our models and migrate them to the new MongoDB representations. However, there are aggregation columns and custom <a href="http://railscasts.com/episodes/23-counter-cache-column">counter caches</a> that must be recomputed once the migration is done. I was asked to write a rake task to perform this operation on all relevant models. It was also recommended I find a way to test this locally, as the task was going to be performed on millions of rows of data in production, making it imperative to get it right the first time.</p>

<p>No better way to get started than to dive in head first!</p>

<h2>The Model Space</h2>

<p>The Rails model I&rsquo;ll be using is <strong>Question</strong>. The <code>Mongoid</code> Ruby driver is used instead of <code>ActiveRecord</code> &ndash; I&rsquo;ll do my best to explain any Mongoid syntax in case you have never worked with MongoDB.</p>

<p>Here are the parts of the <strong>Question</strong> model we care about in the Rails app:</p>

<p>```ruby</p>

<h1>app/models/question.rb</h1>

<p>class Question
  include Mongoid::Document</p>

<p>  field :answers_count, type: Integer, default: 0
  field :approved_answers_count, type: Integer, default: 0</p>

<p>  has_many :answers
end
```</p>

<p>So, what&rsquo;s happening with the code above?</p>

<ul>
<li>With Mongoid, we include the <code>Mongoid::Document</code> module.

<ul>
<li>An individual instance of a model is known as a <code>document</code>.</li>
<li>The group of all Question models is known as a <code>collection</code>.</li>
</ul>
</li>
<li>With Mongoid, our schema is defined <strong>within the model</strong>.

<ul>
<li>This means there are no migrations to run.</li>
<li>We define fields: <code>answers_count</code> and <code>approved_answers_count</code>.</li>
</ul>
</li>
<li>This model <code>has_many: answers</code>, so <code>question.answers</code> should yield me its answers.</li>
</ul>


<p>Great! Now let&rsquo;s look at the rake task that will recompute those fields.</p>

<h2>Rake Task to Compute Aggregation Fields</h2>

<p>Let&rsquo;s get right to it and look at the rake task I wrote to re-compute these fields:</p>

<p>```ruby</p>

<h1>lib/tasks/aggregation.rake</h1>

<p>WORK_SIZE ||= 1000</p>

<p>desc &lsquo;Aggregation Task for: Question&rsquo;
task :aggregation_question => :environment do
  Question.all.batch_size(WORK_SIZE).each do |q|</p>

<pre><code>attrs = {}

answers_count          = q.answers.count
approved_answers_count = q.answers.where(approved: true).count

attrs[:answers_count]          = answers_count          unless answers_count.zero?
attrs[:approved_answers_count] = approved_answers_count unless approved_answers_count.zero?

Question.where(id: q.id).update(attrs) unless attrs.empty?
</code></pre>

<p>  end
end
```</p>

<p>Let&rsquo;s dissect what&rsquo;s happening above:</p>

<ul>
<li>I define <code>WORK_SIZE</code> to control the # of Questions I load at a time.

<ul>
<li>Attempting to load all models into memory at once is NOT recommended.</li>
</ul>
</li>
<li>Each field is computed and added to the <code>attrs</code> hash if it&rsquo;s non-zero.

<ul>
<li>Recall how the model defaults these to 0 &ndash; no need to update if not needed, right?</li>
</ul>
</li>
<li>In order to perform just one vs. multiple updates, I pass in my hash to update if non-empty.

<ul>
<li>This query is *optimized** via Mongoid / MongoDB. You&rsquo;ll have to believe me here.</li>
</ul>
</li>
</ul>


<p>Great, so now I have a rake task built. How can I test this?</p>

<h2>Contextual Magic with FactoryGirl and RSpec</h2>

<p>I have to give credit where it&rsquo;s due &ndash; this post titled <strong><a href="http://robots.thoughtbot.com/test-rake-tasks-like-a-boss">How to Test Rake Tasks Like a BOSS</a></strong> from <a href="http://www.thoughtbot.com">ThoughtBot</a> made this all possible, with a few modifications.</p>

<h3>Sharing is Caring via RSpec Context</h3>

<p>Since I knew I was going to be performing this operation across multiple models (all with different fields), I started out by making an RSpec context (as described in the blog post):</p>

<p>```ruby</p>

<h1>spec/support/shared_contexts/aggregation.rb</h1>

<p>shared_context &lsquo;aggregation&rsquo; do
  let(:rake)      { Rake::Application.new }
  let(:task_name) { self.class.top_level_description }
  let(:task_path) { &ldquo;lib/tasks/aggregation&rdquo; }
  subject         { rake[task_name] }</p>

<p>  def loaded_files_excluding_current_rake_file</p>

<pre><code>$".reject {|file| file == Rails.root.join("#{task_path}.rake").to_s }
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>Rake.application = rake
Rake.application.rake_require(task_path, [Rails.root.to_s], loaded_files_excluding_current_rake_file)

Rake::Task.define_task(:environment)
</code></pre>

<p>  end
end
```</p>

<p>Here are the lines we care the most about:</p>

<ul>
<li><code>let(:task_name)</code> => my task_name will equal the top level description of my Rspec example.</li>
<li><code>let(:task_path)</code> => here&rsquo;s where I link to my aggregation.rake file.</li>
<li><code>subject { ... }</code> => the subject in my RSpec example will be set to my specifc rake task.</li>
</ul>


<p>This context is automagically loaded in all specs thanks to this line in <code>spec_helper.rb</code>:</p>

<p><code>ruby
Dir[Rails.root.join("spec/support/**/*.rb")].sort.each {|f| require f}
</code></p>

<p>Now with this context setup, let&rsquo;s move onto the Factories.</p>

<h3>It&rsquo;s a Bird&hellip; It&rsquo;s a Plane&hellip; It&rsquo;s FactoryGirl!</h3>

<p>In my Rspec tests, you will see things like the following:</p>

<p>```ruby
FactoryGirl.create(:question)
FactoryGirl.create(:answer, question: question) }
FactoryGirl.create(:answer, question: question, approved: true)</p>

<p>```</p>

<p>Factories are defined elsewhere that give me the flexibility to create new documents (models) in particular configurations. In this case, I know I want to specifically test my two aggregation fields, so I&rsquo;ll be setting those when I use my factories in my RSpec examples. So the associations are upheld, I want to assign the newly create answers to the question that was created.</p>

<p>With my factories all setup, I&rsquo;m ready to look at my RSpec tests.</p>

<h3>RSpec, Do That Voodoo That You Do So Well</h3>

<p>Now with everything in place, let&rsquo;s write some Rspec examples. I&rsquo;m going to break this up into two sections so that it&rsquo;s easier to digest.</p>

<h4>INITIALIZATION</h4>

<p>```ruby</p>

<h1>spec/lib/aggregation_spec.rb</h1>

<p>describe &lsquo;aggregation_question&rsquo; do
  include_context &lsquo;aggregation&rsquo;</p>

<p>  describe &lsquo;Initialization&rsquo; do</p>

<pre><code>its(:prerequisites) { should include('environment') }

it 'should initialize fields to zero' do
  q = FactoryGirl.create(:question)

  q.answers_count.should be_zero
  q.approved_answers_count.should be_zero
end
</code></pre>

<p>  end</p>

<p>  # Execution</p>

<p>  end
end
```</p>

<p>So, what&rsquo;s going on here?</p>

<ul>
<li>The top level description of my example is purposely named <code>aggregation_question</code>.

<ul>
<li>If you recall, this is the name of my rake task, which will be set as the <code>subject</code>.</li>
</ul>
</li>
<li>For this to all work, I must include my shared_context we created previously.</li>
<li>I create a few examples to test out the initialization of my model.</li>
</ul>


<p>Awesome! This all works as intended. I know my rake task (<code>:aggregation_question</code>) is wired correctly due to the <code>:prerequisites</code> example. Now, onto the execution of the rake task.</p>

<h4>EXECUTION</h4>

<p>```ruby</p>

<h1>spec/lib/aggregation_spec.rb</h1>

<p>describe &lsquo;aggregation_question&rsquo; do
  include_context &lsquo;aggregation&rsquo;</p>

<pre><code># Initialization

describe 'Execution' do
before do
  (1..3).each do |n|
    question = FactoryGirl.create(:question)
    n.times  { FactoryGirl.create(:answer, question: question) }
    n.times  { FactoryGirl.create(:answer, question: question, approved: true) }

    question.set(:answers_count, 0)
    question.set(:approved_answers_count, 0)
  end
end

it 'should contain the correct instance count' do
  Question.count.should == 3
end

it 'should properly set aggregation fields for Questions' do
  Question.all.each do |q|
    q.answers_count.should be_zero
    q.approved_answers_count.should be_zero
  end

  subject.invoke

  Question.all.each_with_index do |q,i|
    q.answers_count.should == (i + 1) * 2
    q.approved_answers_count.should == i + 1
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Now, onto the execution of the rake task:</p>

<ul>
<li>Using my factories, I use a loop to setup a total of three (3) questions as follows:

<ul>
<li>Q1: 2 total answers, 1 of which  is approved.</li>
<li>Q2: 4 total answers, 2 of which are approved.</li>
<li>Q3: 6 total answers, 3 of which are approved.</li>
</ul>
</li>
<li>I force set my aggregation counters to 0, since the model counter cache is incrementing the values upon creation.</li>
<li>Just to be sure, I check to see that my test database has the correct number of questions.</li>
</ul>


<p>The magic all happens in my last example:</p>

<ol>
<li>First, I check to ensure all Questions I created have zero values for their aggregation fields.</li>
<li>Given that <code>subject</code> is the rake task I want to execute, I <code>invoke</code> the task, running it.</li>
<li>Based on my creation criteria, I then check to ensure all fields equal their expected values.</li>
</ol>


<p>Running these tests yields four (4) <strong>passing</strong> examples!</p>

<h2>Future Considerations</h2>

<p>Having gone through the first model in this exact fashion, I was able to write my <strong>tests first</strong> for the other models and write similar examples. However, there&rsquo;s a really big issue here that is hard to ignore.</p>

<p>While the tests are great, they in no way represent the volume of data I&rsquo;ll be finding in production. As you can see, the rake task is executed 1000 documents at a time, in serial fashion. The time this takes in unacceptable when processing millions of documents, as this data needs to be available as soon as possible. So, how can we solve this problem?</p>

<p>Stay tuned for a future blog post on how I re-did my rake task as a <code>DelayedJob</code>.</p>

<p>Thanks for reading; keep calm and carry on!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveling Up my Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby/"/>
    <updated>2014-01-23T22:37:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby</id>
    <content type="html"><![CDATA[<p>In an effort to share more with the world and write, I&rsquo;m going to give this micro-post idea a try.</p>

<h2>An Evolution Through Time</h2>

<p>It&rsquo;s been about 6 months since I&rsquo;ve started learning Ruby, and until recently, I didn&rsquo;t realize how much I had learned in such little time. Both at work and through self-study, I continue to build, define, and hone my programming knowledge. I&rsquo;ve been investing a lot of time at work with Ruby / Rails / RSpec, and decided to mix it up with some Front-End skill development off hours. Whatever path you choose on your conquest to become a better developer, be receptive to learning and stay focused.</p>

<p>It&rsquo;s a fun exercise to see how your programming skill evolves as a function of time. Recently, I was helping a friend write a scraper for the StreetEasy website. This is only a small sample of the overall code.</p>

<p>This is how I would&rsquo;ve written this portion a few months ago:</p>

<p>```ruby
class Scraper
  attr_accessor :type, # &hellip;</p>

<p>  def initialize(browser)</p>

<pre><code>@type = "rent" if browser.contains?("rent")
@type = "sale" if browser.contains?("sale")
# ...
</code></pre>

<p>  end</p>

<p>  # &hellip;
end</p>

<p>```</p>

<p>And here&rsquo;s how I wrote it a few days ago:</p>

<p>```ruby
class StreetEasyScraper
  attr_reader :type, # &hellip;</p>

<p>  def initialize(browser)</p>

<pre><code>@type = browser['rent'] || 'sale'
# ...
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>Let&rsquo;s look at some of the differences:</p>

<ul>
<li><code>attr_reader</code> instead of <code>attr_accessor</code>, as <code>@type</code> won&rsquo;t be changing.</li>
<li>A really cool way to search &amp; return a substring if it exists.</li>
<li>Use of the <code>||</code> operator, as I know <code>browser</code> will only ever be 1 of 2 values.</li>
<li><code>' '</code> vs <code>" "</code> for strings that will not be interpolated (Ruby best practice).</li>
<li><strong>Less Code</strong> which accomplishes the same thing more optimally.</li>
</ul>


<p>As simple as these five differences may be, they took me by surprise and made me feel amazing. The things I&rsquo;m both learning and seeing are sticking, and rather than going back and refactoring, they&rsquo;re being expressed in my code upfront. Pretty awesome!</p>

<h2>Introspect Often</h2>

<p>Amidst the chaos we know as life, I encourage you to take the time to <strong>introspect</strong>, regardless of whether you&rsquo;re new to programming or not. There are days when you feel feel down; however, remind yourself that as long as you&rsquo;ve learned something that day, you will always come out on top. Take breaks from programming (this is healthy and strongly recommended) and get regular sleep. Your body and mind need rest to be at their prime!</p>

<p>Don&rsquo;t forget that more often than not:</p>

<blockquote><p style="text-align:center;"><strong>The best teachers are also students.</strong></p></blockquote>

<p>Stay strong and continue learning, friends. Have faith in yourselves, and continue being pillars of support for each other.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Modifications in Methods]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods/"/>
    <updated>2013-10-13T10:04:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods</id>
    <content type="html"><![CDATA[<p>Every now and then, I&rsquo;ll post some cool tips and tricks I find awesome or important to know as you&rsquo;re learning the Ruby programming language. There&rsquo;s a ton out there to share, so let&rsquo;s get to it.</p>

<h2>Pass Parameters by &lsquo;Value&rsquo; or &lsquo;Reference&rsquo;</h2>

<p>Prior to learning about Ruby, my primary programming language was C++. When passing arguments to methods, most statically typed programming languages require you to <em>explicitly</em> declare variables as <strong>value</strong> or <strong>reference</strong> parameters when passed into methods.</p>

<ul>
<li>Pass by <strong>value</strong>: a <em>copy</em> of the parameter is passed into method.</li>
<li>Pass by <strong>reference</strong>: the <em>actual</em> parameter passed into method.</li>
</ul>


<p>In other words, when passed by value, the original parameter passed into the method is not changed, whereas when passing by reference, the original object may actually be changed.</p>

<h2>Object Behavior in Ruby Methods</h2>

<p>Ruby is powerful in that it is a dynamically typed language which is good for duck-typing and meta-programming. This means that you (1) don&rsquo;t have to explicitly define variable types or (2) distinguish between value / reference parameters.</p>

<p>In order to illustrate this, check out the code below:</p>

<p>```ruby
def modifyStrings(aString,anotherString)
  aString.capitalize!
  anotherString.reverse!.capitalize!</p>

<pre><code>aString.swapcase +  " " + anotherString.swapcase!
</code></pre>

<p>end
```</p>

<p>This method takes in two strings and performs modifications. It turns out that the original objects passed into this method <em>will be changed</em> as a result of the bang (!) methods performed in the strings, regardless of them being in this method scope.</p>

<p>Take a look at this code &ndash; it checks Object ID and values at different stages of the example to reinforce the fact that the original objects are being modified:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Object Modifcations in Ruby Methods (object_mods_in_ruby.rb)</span> <a href='/code/2013-10-13-grokking-on-ruby-objects-in-methods/object_mods_in_ruby.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">modifyStrings</span><span class="p">(</span><span class="n">aString</span><span class="p">,</span><span class="n">anotherString</span><span class="p">)</span>
</span><span class='line'>	<span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">aString gets capitalized(!).&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;aString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">aString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">aString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">anotherString gets reversed(!) and capitalized(!)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">anotherString</span><span class="o">.</span><span class="n">reverse!</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;anotherString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">anotherString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">anotherString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Return ::: aString swap-cased + </span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2"> + anotherString swap-cased(!)&quot;</span><span class="p">)</span>
</span><span class='line'>	<span class="n">aString</span><span class="o">.</span><span class="n">swapcase</span> <span class="o">+</span>  <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">anotherString</span><span class="o">.</span><span class="n">swapcase!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Original Ruby Objects can be modified in Methods</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">modifyStrings</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str3 =&gt; Address: </span><span class="si">#{</span><span class="n">str3</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the output from the program:</p>

<p><img src="/images/posts/2013-10-13-grokking-on-ruby-objects-in-methods/ruby_obj_output.png" width="1000" height="750"></p>

<p>Following the method and the requisite output, you&rsquo;ll notice how the bang(!) methods changed the original objects (Object IDs are still the same).</p>

<h2>Summary</h2>

<p>Understanding the implications and importance of object modifications in Ruby methods is <em>critical</em> to understanding how Ruby works and will help you avoid issues in the future.</p>

<p>Happy coding!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked Lists and Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby/"/>
    <updated>2013-08-08T15:24:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby</id>
    <content type="html"><![CDATA[<p>One of the most talked about data structures in Computer Science is the <strong>Linked List</strong>.</p>

<p>So, what is a <strong>Linked List</strong> and how can we implement it in Ruby?</p>

<h2>What is a Linked List?</h2>

<p>As defined by <strong><a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia</a></strong>, a <strong>Linked List</strong> (LL) is:</p>

<blockquote><p>Data structure consisting of a group of nodes which together represent a sequence.</p></blockquote>

<p>In the simplest implementation of a LinkedList, each node has the following:</p>

<blockquote><p><strong>value</strong> = represents the value of the node (e.g. integer, Class, etc.)</p>

<p><strong>next</strong> = pointer to the next value in the sequence.</p></blockquote>

<p>In most implementations, you also have a head and a tail pointer:</p>

<blockquote><p><strong>head</strong> = points to the first Node in the linked list.</p>

<p><strong>tail</strong> = points to the last Node in the linked list.</p></blockquote>

<p>For the visual learners, here&rsquo;s a picture that shows the structure:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_layout.png" width="500" height="500"></p>

<p>Awesome &ndash; so, how can we build this in Ruby?</p>

<h2>Ruby Implementation of a Linked List</h2>

<p>Two classes are needed in order to build a Linked List: <code>Node</code> and <code>LinkedList</code></p>

<h3>Node Class</h3>

<p>Here is my implementation of the <code>Node</code> class:</p>

<p>```ruby</p>

<h1>Define a Node class that holds the following:</h1>

<h1>=> next : stores the next Node in the Linked List.</h1>

<h1>=> value: stores the value of the current list element.</h1>

<p>class Node</p>

<pre><code>attr_accessor :value, :next

def initialize(value)
    @value = value
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>LinkedList Class</h3>

<p>Here is my implementation of the <code>LinkedList</code> class:</p>

<p>```ruby</p>

<h1>Define a LinkedList class the holds the following:</h1>

<h1>=> head : pointer to the head of the Linked List.</h1>

<h1>=> tail : pointer to the tail of the Linked List.</h1>

<p>class LinkedList</p>

<pre><code>attr_accessor :head, :tail

# Initialize head and tail to same initial Node.
def initialize (head)
    raise "LinkedList must be initialized with a Node." unless head.is_a?(Node)

    @head = head
    @tail = head
end

# Insert Node after the tail of the LinkedList.
def insert(node)
    @tail.next = node
    @tail = @tail.next
end

# Print out all the values of the LinkedList in order.
def print
    current_node = @head

    while current_node != nil
        puts "\tLL Node Value = #{current_node.value}"
        current_node = current_node.next
    end
end

# Iterate through LinkedList and yield values to block.
def iterate
    if block_given?
        current_node = @head

        while current_node != nil
            yield current_node.value
            current_node = current_node.next
        end
    else
        print
    end
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>TestBench</h3>

<p>Here is a quick test bench I wrote to test functionality:</p>

<p>```ruby</p>

<p>puts &ldquo;\nCreating LinkedList of 5 Node elements with values 1-5.\n&rdquo;</p>

<p>h    = Node.new(1)
list = LinkedList.new(h)</p>

<p>(2..5).each {|n| list.insert(Node.new(n)) }</p>

<p>puts &ldquo;\nCurrent values contained in LinkedList:\n&rdquo;</p>

<p>list.print</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Values of head and tail of LinkedList:\n&rdquo;</p>

<p>puts &ldquo;\tValue of LL Head = #{list.head.value}&rdquo;
puts &ldquo;\tValue of LL Tail = #{list.tail.value}&rdquo;</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Iterating through LinkedList without a block prints the list.\n&rdquo;</p>

<p>list.iterate</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Iterating through the LinkedList with a block runs the block on each element.\n&rdquo;</p>

<p>list.iterate {|n| puts &ldquo;\tLL Node Value squared = #{n ** 2}&rdquo;}</p>

<p>puts &ldquo;\n&rdquo;</p>

<p>```</p>

<p>Here is the output from the test bench:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_output.png" width="750" height="750"></p>

<p>Take a look at the methods I defined for:</p>

<ul>
<li>List insertion (using the <code>tail</code>) => O(1) operation.</li>
<li>Printing the list (in order).</li>
<li>List iteration (with block capability).</li>
</ul>


<p>The source code for my example is contained <a href="/code/2013-08-08-linked-lists-and-ruby/linked_list.rb">HERE</a>.</p>

<h2>More with Linked Lists</h2>

<p>The fun doesn&rsquo;t end here!</p>

<p>Check out these other types of Linked Lists:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/Doubly-linked-list.png" width="750" height="750"></p>

<p style="text-align:center;"> <strong>Doubly Linked Lists</strong></p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/Circularly-linked-list.png" width="425" height="425"></p>

<p style="text-align:center;"> <strong>Circular Linked Lists</strong></p>

<p>Would you ever use a Linked List in practice, you ask?</p>

<p>It depends on your domain model. If you get the chance, look up a <a href="http://en.wikipedia.org/wiki/Sparse_matrix">sparse matrix</a>. This problem would be perfect for a linked list.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Japanese Language]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/08/01/ruby-and-the-japanese-language/"/>
    <updated>2013-08-01T08:00:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/08/01/ruby-and-the-japanese-language</id>
    <content type="html"><![CDATA[<p>The inspiration for this blog post comes from a few places:</p>

<ol>
<li>My love of languages and world-wide celebration of culture.</li>
<li>This <a href="http://www.slideshare.net/inouemak/ruby-and-japanesepdf">slide deck</a> by <a href="https://twitter.com/makoto_inoue">Makoto Inoue</a> on <strong>Ruby and Japanese</strong>.</li>
<li>General curiosity on the topic.</li>
</ol>


<h2><strong>こんにちは世界</strong> (Kon'nichiwa sekai!)</h2>

<p>Growing up, my first <strong>spoken</strong> language was Spanish, followed shortly there after by English and French, all three of which I&rsquo;m fluent in. In the present, I split my time between learning 5 other languages &ndash; Japanese, Mandarin Chinese, German, Italian, and Russian.</p>

<p>Interestingly enough, during this same time period, I&rsquo;ve also worked with a variety of different <strong>programming</strong> languages &ndash; C, C++, C#, Java, Python, Scheme, and MATLAB. I continue to learn languages, like Ruby, JavaScript, and HTML/CSS.</p>

<p>That begs me to ask the question:</p>

<blockquote><p style="text-align:center;"> <strong>Is there a link between programming languages and spoken languages?</strong></p></blockquote>

<p>Why yes, yes there is &ndash; let&rsquo;s take a look at <strong>Ruby and the Japanese Language</strong>.</p>

<h2>Insight into the Japanese Language</h2>

<p>Japanese has a total of three (3) different alphabets, all of which serve their own purpose:</p>

<ol>
<li><strong>Hiragana</strong> &ndash; syllabic alphabet for domestic use.</li>
<li><strong>Katakana</strong> &ndash; syllabic alphabet used for &ldquo;borrowed&rdquo; / new words.</li>
<li><strong>Kanji</strong>      &ndash; symbolic alphabet used to import Chinese words.</li>
</ol>


<p>Most students learn the syllabic alphabets first through memorization and mnemonics, using charts like this one to assist in the memorization:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-07-28-ruby-and-the-japanese-language/alphabet_chart.png" width="750" height="750"></p>

<p>Thousands of Kanji characters are in existence today &ndash; an individual in Japanese is considered fluent when they have mastery of the base 2000 characters. These are generally learned through memorization and constant practice.</p>

<p>Cool &ndash; so how does the Japanese language relate to the Ruby programming language?</p>

<h2>Japanese &lt;=> Ruby &ndash; What&rsquo;s the Deal?</h2>

<p>Based on the definitions of the alphabets, we can see the following comparisons between the Japanese spoken language and the Ruby programming language:</p>

<ol>
<li><strong>Hiragana</strong> &ndash; syllabic alphabet for domestic use.

<blockquote><p>In Ruby: built for <strong>domestic</strong> ease-of-use (focus on programmer happiness).</p></blockquote></li>
<li><strong>Katakana</strong> &ndash; syllabic alphabet used for &ldquo;borrowed&rdquo; / new words.

<blockquote><p>In Ruby: continually evolving and adapting <strong>new</strong> functionality.</p></blockquote></li>
<li><strong>Kanji</strong>      &ndash; symbolic alphabet used to import Chinese words.

<blockquote><p>In Ruby: merge (<strong>import</strong>) concepts of Object Orientated / Functional programming.</p></blockquote></li>
</ol>


<p>Furthermore, parts of the Japanese language can be seen as both object oriented (OO) and functional in nature.</p>

<h3>Object Oriented Comparison</h3>

<p>Thinking back to when we were learning English, our teachers taught us that sentences are formed in the following order: Subject &ndash; Verb &ndash; <strong>Object</strong> (SVO). It&rsquo;s fair to state that English is an &ldquo;Object-Oriented Language,&rdquo; where context revolves around the object in question.</p>

<p>Japanese is quite similar, with the &ldquo;normal&rdquo; form of expressions being in the following form: Subject &ndash; <strong>Object</strong> &ndash; Verb (SOV). For example, take the following sentence:</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><code>English</code></th>
<th align="center"><code>Japanese</code></th>
<th align="center"><code>Pronunciation</code></th>
<th align="center"><code>Structure</code></th>
<th align="center"><code>Literal English</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">私はベーコンを食べます。</td>
<td align="center">Watashi ha bacon wo tabemasu.</td>
<td align="center">SOV</td>
<td align="center">&ldquo;I bacon eat.&rdquo;</td>
</tr>
</tbody>
</table>


<p>Ruby&rsquo;s primary focus, much like the Japanese language, targets the object as the center of attention. Although the grammatical structure may be different, the intention remains the absolute same.</p>

<p>In terms of code, Ruby also allows us to define functionality in both object oriented and procedural ways:</p>

<p>```ruby</p>

<h1>Object Oriented</h1>

<p>File.open(&ldquo;foo.txt&rdquo;)</p>

<h1>Procedural</h1>

<p>open(&ldquo;file&rdquo;,&ldquo;foo.txt)
```
The example above shows the flexibility of Ruby to implement the same solution using two different grammatical orders. In most cases, when dealing with a complex problem, functionality is encapsulated within a class. Object Orientation proves to be a great aspect of the Ruby language.</p>

<h3>Functional Comparison</h3>

<p>Japanese grammar is different in that it is <em>post-positional</em>:</p>

<blockquote><p>postposition &ndash; a word placed after the word it governs (e.g. the &lsquo;ward&rsquo; in homeward).</p></blockquote>

<p>These <em>post-positional</em> words are used to decide the role of the noun which it supports. This would allow a Japanese speaker to change the order of the grammar pretty easily, <em>chaining as many sentences as desired</em>, and even <em>omitting the subject</em> altogether.</p>

<p>Here are some examples:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-07-28-ruby-and-the-japanese-language/functional_japanese.png" width="500" height="500"></p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><code>English</code></th>
<th align="center"><code>Japanese</code></th>
<th align="center"><code>Pronunciation</code></th>
<th align="center"><code>Structure</code></th>
<th align="center"><code>Literal English</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">私はベーコンを食べます。</td>
<td align="center">Watashi ha bacon wo tabemasu.</td>
<td align="center">SOV</td>
<td align="center">&ldquo;I bacon eat.&rdquo;</td>
</tr>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">ベーコンを私は食べます。</td>
<td align="center">Bacon wo watashi ha tabemasu.</td>
<td align="center">OSV</td>
<td align="center">&ldquo;Bacon I eat.&rdquo;</td>
</tr>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">ベーコンを食べます。</td>
<td align="center">Bacon wo tabemasu.</td>
<td align="center">OV</td>
<td align="center">&ldquo;Bacon eat.&rdquo;</td>
</tr>
</tbody>
</table>


<p>Where do we see this sort of behavior in Ruby?</p>

<p>```ruby</p>

<h6>#</h6>

<h1>Expressively Iterative</h1>

<h6>#</h6>

<h1>.times enumerator => 5x</h1>

<p>5.times do</p>

<pre><code># =&gt; Perform action here.
</code></pre>

<p>end</p>

<p>i = 0
c = 5</p>

<h1>while loop => 5x</h1>

<p>while i &lt; c do</p>

<pre><code># Perform action here.
c += 1
</code></pre>

<p>end</p>

<h1>for loop => 5x</h1>

<p>for i in 0..5</p>

<pre><code># Perform action here.
</code></pre>

<p>end</p>

<h6>#</h6>

<h1>Functional Flexibility</h1>

<h6>#</h6>

<p>str  = &ldquo;Hello World!&rdquo;</p>

<p>expr1 = str.upcase.delete(&lsquo;o&rsquo;).gsub(&lsquo;O&rsquo;,&lsquo;X&rsquo;)</p>

<pre><code># =&gt; "HELLX WXRLD!"
</code></pre>

<p>expr2 = str.delete(&lsquo;o&rsquo;).upcase.gsub(&lsquo;O&rsquo;,&lsquo;X&rsquo;)</p>

<pre><code># =&gt; "HELL WRLD!"
</code></pre>

<p>expr3 = str.gsub(&lsquo;O&rsquo;,&lsquo;X&rsquo;).upcase.delete(&lsquo;o&rsquo;)</p>

<pre><code># =&gt; "HELLO WORLD!"
</code></pre>

<h6>#</h6>

<h1>Contextual Evaluation</h1>

<h6>#</h6>

<h1>Opens a file.</h1>

<p>File.open(&ldquo;foo.txt&rdquo;)</p>

<h1>Open a file and then yield to a block.</h1>

<p>File.open(&ldquo;foo.txt&rdquo;).each do |line|</p>

<pre><code>puts line
</code></pre>

<p>end</p>

<h6>#</h6>

<h1>Implicative Nature</h1>

<h6>#</h6>

<h1>Explicit self used in instance method.</h1>

<p>class Dog</p>

<pre><code>def initialize(name)
    @name = name
    self.bark(@name)    # =&gt; SVO
end

def bark(name)
    puts "'WOOF!' barks #{name}."
end
</code></pre>

<p>end</p>

<h1>Implicit call to instance method without self.</h1>

<p>class Dog</p>

<pre><code>def initialize(name)
    @name = name
    bark(@name)     # =&gt; VO
end

def bark(name)
    puts "'WOOF!' barks #{name}."
end
</code></pre>

<p>end</p>

<p>```</p>

<p>Functional programming in Ruby allows for hard-core abstraction and meta-programming, which is something that other programming languages do not support as easily.</p>

<h2>Ruby in Japanese</h2>

<p>One example of a gem that allows you to evaluate Japanese characters and expressions in the Ruby programming language is the <a href="https://github.com/makoto/japanize">japanize</a> gem.</p>

<p>Here&rsquo;s output to what a command line might look like, along with a test that was written in order to test the interpreter:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-07-28-ruby-and-the-japanese-language/japanize_output.png" width="500" height="500"></p>

<p style="text-align:center;"> <img src="/images/posts/2013-07-28-ruby-and-the-japanese-language/japanize_test.png" width="500" height="500"></p>

<p>Note that this gem is outdated (3 years old), and that other gems exist that establish the morphemes (translation patterns) between English and Japanese for Ruby.</p>

<h2>Embracing Language Diversity in the World</h2>

<p>Too often, I overhear people argue over which language is:</p>

<ul>
<li>Better.</li>
<li>Faster.</li>
<li>Stronger.</li>
<li>More Robust.</li>
<li>More Semantically Correct.</li>
</ul>


<p>As programmers and as citizens of a diverse world, it&rsquo;s up to us to <strong>respect</strong> language in general, whether programming or spoken. It should come as no surprise that programming and spoken languages are so similar, <em>as one is used to express</em> the other.</p>

<blockquote><p style="text-align:center;"> <strong>どうもありがとうございました。</strong> (Dōmo arigatōgozaimashita!)</p></blockquote>

<p>CJL</p>
]]></content>
  </entry>
  
</feed>
