<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | My Adventure Through Code]]></title>
  <link href="http://carlosplusplus.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://carlosplusplus.github.io/"/>
  <updated>2014-09-17T21:48:38-04:00</updated>
  <id>http://carlosplusplus.github.io/</id>
  <author>
    <name><![CDATA[Carlos Lazo]]></name>
    <email><![CDATA[carlos.jose.lazo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Synchronous Ruby Processing with DelayedJob]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/02/22/synchronous-ruby-tasks-with-delayedjob/"/>
    <updated>2014-02-22T12:00:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/02/22/synchronous-ruby-tasks-with-delayedjob</id>
    <content type="html"><![CDATA[<p>As promised in my previous entry, it&rsquo;s time to talk about how one can better optimize asynchronous tasks in the Ruby programming language via <strong>DelayedJob</strong>. If you haven&rsquo;t already, I strongly recommend you read my <strong><a href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/">last blog post</a></strong>, as I will be using the example presented there.</p>

<p>So, what the deal with <em>synchronization</em> and why should we care?</p>

<h2>Asynchronous&hellip; Synchronous&hellip; Huh?</h2>

<p>Let&rsquo;s first take a look at what these two words mean, in their simplest forms:</p>

<blockquote><p><strong>Asynchronous</strong> &ndash; NOT occurring at the same time.</p>

<p><strong>Synchronous</strong> &ndash;  occurring at the same time.</p></blockquote>

<p>When we first start learning Ruby, or most programming languages, we are taught to think of events as asynchronous. In other words, a program is:</p>

<ol>
<li>Executed in the order it is written.</li>
<li>Run from top-to-bottom in a serial, non-parallel fashion.</li>
<li>The next line runs after the previous completes.</li>
</ol>


<p>There are, however, situations where you may want to think synchronously. In other words, perhaps it may be preferable for events to happen at the same time, or more commonly, <strong>in the background</strong>. This would allow your web application to keep servicing operations while intense work was being performed elsewhere. A few uses cases for this may be:</p>

<ul>
<li>Batch imports of updates to your database.</li>
<li>HTTP downloads (steaming intensive operations).</li>
<li>Image resizing (size intensive operations).</li>
<li>Sending mass emails (newsletters) to your user base.</li>
</ul>


<p>Let&rsquo;s explore the use case for batch updates as it relates to Rails rake tasks.</p>

<h2>Issue with Previous Rake Task Implementation</h2>

<p>As described in my <strong><a href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/">last blog post</a></strong>, I implemented a set of Rake tasks that recomputed custom counter caches for some of my Rails models. While the solution certainly solved the problem, it was implemented in an asynchronous fashion. In other words, each <strong>unit of work</strong> needed to complete before the previous one. In this case, a unit of work was equal to one model having its counter caches recomputed.</p>

<p>To highlight the severity of the issue, here&rsquo;s a look at what the full rake task does:</p>

<p>```ruby
namespace :mongo_import do
  MODELS    ||= %w(answer comment question resource)
  WORK_SIZE ||= 1000.freeze</p>

<p>  desc &lsquo;Rebuilds ALL aggregation columns and counter caches.&rsquo;
  task :aggregation => :environment do</p>

<pre><code>MODELS.each { |model| Rake::Task["mongo_import:aggregation_#{model}"].invoke }
</code></pre>

<p>  end</p>

<p>```</p>

<p>As you can see, there are a total of four (4) rake tasks that will be run in sequence, each with varying levels of work based on the number of models present in the database and the amount of counter caches for each model. Given that this work needs to be done while the data set is in production, these rake tasks need to finish fast &ndash; this is impossible with the current implementation. Wouldn&rsquo;t it be great if there was a way to split up this work and run these tasks in parallel, or synchronously, in order to get the task done faster?</p>

<p>Let&rsquo;s see what <code>DelayedJob</code> can do for us.</p>

<h2>DelayedJob to the Rescue</h2>

<p>For those who have never heard of or used <code>DelayedJob</code>, I recommend you check out the following resources: <strong><a href="https://github.com/collectiveidea/delayed_job">DelayedJob Github Repository</a></strong> and <strong><a href="http://railscasts.com/episodes/171-delayed-job">RailsCast on DelayedJob</a></strong>. DelayedJob integrates pretty seamlessly with Rails applications and different database configurations, like SQLite3 and MongoDB. The documentation provides great use cases for when / why you would want to use this service.</p>

<h3>Background Process and Workers</h3>

<p>I won&rsquo;t go into the specific implementation detail getting setup with DelayedJob (check out the documentation), but I do want to mention a few key concepts that are important:</p>

<blockquote><p><strong>Enqueue</strong>: add unit of work to DelayedJob priority queue for processing.</p>

<p><strong>Perform</strong>: method required for DelayedJob to recognize class as actionable.</p>

<p><strong>Workers</strong>: specific background processes setup to handle <strong>units of work</strong>.</p></blockquote>

<p>At the high level, your processing work flow will probably look something like this:</p>

<ol>
<li>Spin up an amount of workers based on (a) server capability and (b) need.</li>
<li>Enqueue DelayedJobs whenever required (e.g. mass mailings and rake tasks).</li>
<li>Workers will perform queued up jobs as soon as they are &lsquo;free&rsquo; for processing.</li>
</ol>


<p>Great &ndash; let&rsquo;s dive into some code and see how I re-did my rake task.</p>

<h3>Plan of Attack</h3>

<p>The following was the original <strong>asynchronous</strong> code. Notice how each individual model must be updated before the next one can be processed. This is a great time to think about <strong><a href="http://en.wikipedia.org/wiki/Big_O_notation">O(n)</a></strong> &ndash; in other words, how would this algorithm (loop) perform as <code>Question.all</code> gets infinitely large? With the current implementation, not too well &ndash; it would act as a bottleneck for the application, potentially halting other requests from being served:</p>

<p>```ruby
desc &lsquo;Aggregation Task for: Question&rsquo;
task :aggregation_question => :environment do
  Question.all.batch_size(WORK_SIZE).each do |q|</p>

<pre><code>attrs = {}

answers_count          = q.answers.count
approved_answers_count = q.answers.where(approved: true).count

attrs[:answers_count]          = answers_count          unless answers_count.zero?
attrs[:approved_answers_count] = approved_answers_count unless approved_answers_count.zero?

Question.where(id: q.id).update(attrs) unless attrs.empty?
</code></pre>

<p>  end
end
```</p>

<p>What I want to do is abstract the computation itself to a <code>DelayedJob</code> task. Instead of processing on <code>Question.all</code> asynchronously, let&rsquo;s use the current <code>WORK_SIZE</code> constant to <code>slice</code> models in groups and <code>enqueue</code> them via DelayedJob. It&rsquo;s also important to be mindful of making optimized database calls, as you don&rsquo;t want to be slamming your database with unnecessary processing.</p>

<p>Now with our plan of attack in place, let&rsquo;s get to work.</p>

<h3>Rake Task Implementation via DelayedJob</h3>

<p>Even though this blog post will only cover the rake task for the <code>Question</code> model, I know that I&rsquo;ll want to mimic this same structure for all four (4) of my rake tasks. Let&rsquo;s take advantage of some <strong>inheritance</strong> by creating a <code>AggregationRootJob</code> which will take care of our storing our id slices:</p>

<p>```ruby</p>

<h1>lib/mongo_migrator/aggregation_root_job.rb</h1>

<p>module MongoMigrator
  class AggregationRootJob</p>

<pre><code>attr_reader :ids

def initialize(ids)
  @ids = ids
end
</code></pre>

<p>  end
end
```</p>

<p>Remember all that logic I used to have in my core rake task for the model?
Let&rsquo;s abstract that out to a class, called <code>AggregationQuestionJob</code>, which uses the <code>ids</code> attribute from <code>AggregationRootJob</code> to perform work on specific models in the database.</p>

<p>In order for this class to be recognized by DelayedJob, it must contain a <code>perform</code> method, which will be responsible for performing the specific unit of work:</p>

<p>```ruby
module MongoMigrator
  class AggregationQuestionJob &lt; AggregationRootJob</p>

<pre><code>def perform
  Question.where(:id.in =&gt; ids).each do |q|
    attrs = {}

    answers_count          = q.answers.count
    approved_answers_count = q.answers.where(approved: true).count

    attrs[:answers_count]          = answers_count          unless answers_count.zero?
    attrs[:approved_answers_count] = approved_answers_count unless approved_answers_count.zero?

    Question.where(id: q.id).update(attrs) unless attrs.empty?
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Now with all this setup, we can finally rewrite our aggregation rake task as follows:</p>

<p>```ruby
desc &lsquo;Aggregation task for: Question&rsquo;
  task :aggregation_question => :environment do</p>

<pre><code>Question.only(:id).batch_size(WORK_SIZE).each_slice(WORK_SIZE) do |batch|
  Delayed::Job.enqueue(MongoMigrator::AggregationQuestionJob.new(batch.collect(&amp;:id)))
end
</code></pre>

<p>  end
```</p>

<p><strong>Holy nested statements Batman!</strong> Let&rsquo;s break down what this is doing:</p>

<ol>
<li>Since I know I&rsquo;m iterating over my database, I&rsquo;ve optimized my Mongoid (MongoDB) query.

<ul>
<li>For each question, load only the <code>id</code> field, as that&rsquo;s all I need.</li>
<li>Load models into memory in batches of 1000 via <code>each_slice</code> method.</li>
</ul>
</li>
<li>For each batch, generate an array of all model id&rsquo;s via <code>collect(&amp;:id)</code>.</li>
<li>Pass the id array into a new <code>AggregationQuestionJob</code> via <code>initialize</code> method.</li>
<li>Enqueue the job via <code>Delayed::Job.enqueue</code> for workers to process when ready.</li>
<li>Sit back, relax, and profit.</li>
</ol>


<p>Now, instead of processing each individual job one by one, a queue of DelayedJobs waiting to be processed by workers is built as fast as possible. Pretty awesome!</p>

<h3>The Awesome Doesn&rsquo;t End Here!</h3>

<p>It&rsquo;s also worth noting that <code>DelayedJob</code> gives you a some cool tricks via the <code>enqueue</code> method:</p>

<blockquote><p><strong><a href="https://github.com/collectiveidea/delayed_job#hooks">Hooks</a></strong> &ndash; methods similar to ActiveRecord callbacks (e.g. after, before, failure, success).</p>

<p><strong><a href="https://github.com/collectiveidea/delayed_job#named-queues">Named Queues</a></strong> &ndash; you can have multiple queues with custom worker assignments to each.</p>

<p><strong><a href="https://github.com/collectiveidea/delayed_job#gory-details">Priority</a></strong> &ndash; set the relative priority of your Jobs for your worker processing.</p></blockquote>

<p>I recommend checking these out and taking advantage of this customization!</p>

<h2>Closing Thoughts</h2>

<p>To give you an idea of how much this improved the rake task&rsquo;s performance &ndash; with 2 workers, from start to end, the time went from 200 minutes (~3hrs) to 20 minutes, a <strong>10x improvement</strong>! And this was only on my development server &ndash; me and my team are planning to spin up more workers in production to (1) improve performance and (2) decrease overall downtime while this migration is happening.</p>

<p><code>DelayedJob</code> is an incredible tool you should definitely consider trying out.</p>

<p>Keep calm and carry on!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Rake Tasks with RSpec]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/"/>
    <updated>2014-02-01T08:00:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec</id>
    <content type="html"><![CDATA[<p>One of the projects I&rsquo;m currently supporting at work involves migrating an entire database from the <a href="http://www.oracle.com/index.html">Oracle</a> framework to the <a href="http://www.mongodb.org/">MongoDB</a> framework. This Rails application is crucial in that it serves as one of the primary JSON APIs for my company&rsquo;s web services.</p>

<p>My colleagues had written an import task which will takes the (deprecated) Oracle versions of our models and migrate them to the new MongoDB representations. However, there are aggregation columns and custom <a href="http://railscasts.com/episodes/23-counter-cache-column">counter caches</a> that must be recomputed once the migration is done. I was asked to write a rake task to perform this operation on all relevant models. It was also recommended I find a way to test this locally, as the task was going to be performed on millions of rows of data in production, making it imperative to get it right the first time.</p>

<p>This blog post assumes some knowledge about <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> and <a href="http://relishapp.com/rspec">RSpec</a> for testing purposes. Be sure to read up on these incredible testing tools in Ruby if you haven&rsquo;t used them before.</p>

<p>Alright, time to dive in head first. Let&rsquo;s first talk about our model.</p>

<h2>The Model Space</h2>

<p>The Rails model I&rsquo;ll be using is <strong>Question</strong>. The <code>Mongoid</code> Ruby driver is used instead of <code>ActiveRecord</code> &ndash; I&rsquo;ll do my best to explain any Mongoid syntax in case you have never worked with MongoDB.</p>

<p>Here are the parts of the <strong>Question</strong> model we care about in the Rails app:</p>

<p>```ruby</p>

<h1>app/models/question.rb</h1>

<p>class Question
  include Mongoid::Document</p>

<p>  field :answers_count, type: Integer, default: 0
  field :approved_answers_count, type: Integer, default: 0</p>

<p>  has_many :answers
end
```</p>

<p>So, what&rsquo;s happening with the code above?</p>

<ul>
<li>With Mongoid, we include the <code>Mongoid::Document</code> module.

<ul>
<li>An individual instance of a model is known as a <code>document</code>.</li>
<li>The group of all Question models is known as a <code>collection</code>.</li>
</ul>
</li>
<li>With Mongoid, our schema is defined <strong>within the model</strong>.

<ul>
<li>This means there are no migrations to run.</li>
<li>We define fields: <code>answers_count</code> and <code>approved_answers_count</code>.</li>
</ul>
</li>
<li>This model <code>has_many: answers</code>, so <code>question.answers</code> should yield me its answers.</li>
</ul>


<p>Great! Now let&rsquo;s look at the rake task that will recompute those fields.</p>

<h2>Rake Task to Compute Aggregation Fields</h2>

<p>Let&rsquo;s get right to it and look at the rake task I wrote to re-compute these fields:</p>

<p>```ruby</p>

<h1>lib/tasks/aggregation.rake</h1>

<p>WORK_SIZE ||= 1000</p>

<p>desc &lsquo;Aggregation Task for: Question&rsquo;
task :aggregation_question => :environment do
  Question.all.batch_size(WORK_SIZE).each do |q|</p>

<pre><code>attrs = {}

answers_count          = q.answers.count
approved_answers_count = q.answers.where(approved: true).count

attrs[:answers_count]          = answers_count          unless answers_count.zero?
attrs[:approved_answers_count] = approved_answers_count unless approved_answers_count.zero?

Question.where(id: q.id).update(attrs) unless attrs.empty?
</code></pre>

<p>  end
end
```</p>

<p>Let&rsquo;s dissect what&rsquo;s happening above:</p>

<ul>
<li>I define <code>WORK_SIZE</code> to control the # of Questions I load at a time.

<ul>
<li>Attempting to load all models into memory at once is NOT recommended.</li>
</ul>
</li>
<li>Each field is computed and added to the <code>attrs</code> hash if it&rsquo;s non-zero.

<ul>
<li>Recall how the model defaults these to 0 &ndash; no need to update if not needed, right?</li>
</ul>
</li>
<li>In order to perform just one vs. multiple updates, I pass in my hash to update if non-empty.

<ul>
<li>This query is *optimized** via Mongoid / MongoDB. You&rsquo;ll have to believe me here.</li>
</ul>
</li>
</ul>


<p>Great, so now I have a rake task built. How can I test this?</p>

<h2>Contextual Magic with FactoryGirl and RSpec</h2>

<p>I have to give credit where it&rsquo;s due &ndash; this post titled <strong><a href="http://robots.thoughtbot.com/test-rake-tasks-like-a-boss">How to Test Rake Tasks Like a BOSS</a></strong> from <a href="http://www.thoughtbot.com">ThoughtBot</a> made this all possible, with a few modifications. Please read this post for a more in-depth explanation at how this upcoming RSpec context works.</p>

<h3>Sharing is Caring via RSpec Context</h3>

<p>Since I knew I was going to be performing this operation across multiple models (all with different fields), I started out by making an RSpec context (as described in the blog post):</p>

<p>```ruby</p>

<h1>spec/support/shared_contexts/aggregation.rb</h1>

<p>shared_context &lsquo;aggregation&rsquo; do
  let(:rake)      { Rake::Application.new }
  let(:task_name) { self.class.top_level_description }
  let(:task_path) { &ldquo;lib/tasks/aggregation&rdquo; }
  subject         { rake[task_name] }</p>

<p>  def loaded_files_excluding_current_rake_file</p>

<pre><code>$".reject {|file| file == Rails.root.join("#{task_path}.rake").to_s }
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>Rake.application = rake
Rake.application.rake_require(task_path, [Rails.root.to_s], loaded_files_excluding_current_rake_file)

Rake::Task.define_task(:environment)
</code></pre>

<p>  end
end
```</p>

<p>Here are the lines we care the most about:</p>

<ul>
<li><code>let(:task_name)</code> => my task_name will equal the top level description of my RSpec example.</li>
<li><code>let(:task_path)</code> => here&rsquo;s where I link to my aggregation.rake file.</li>
<li><code>subject { ... }</code> => the subject in my RSpec example will be set to my specifc rake task.</li>
</ul>


<p>This context is automagically loaded in all specs thanks to this line in <code>spec_helper.rb</code>:</p>

<p><code>ruby
Dir[Rails.root.join("spec/support/**/*.rb")].sort.each {|f| require f}
</code></p>

<p>Now with this context setup, let&rsquo;s move onto the Factories.</p>

<h3>It&rsquo;s a Bird&hellip; It&rsquo;s a Plane&hellip; It&rsquo;s FactoryGirl!</h3>

<p>In my RSpec tests, you will see things like the following:</p>

<p>```ruby
FactoryGirl.create(:question)
FactoryGirl.create(:answer, question: question) }
FactoryGirl.create(:answer, question: question, approved: true)</p>

<p>```</p>

<p>Factories are defined elsewhere that give me the flexibility to create new documents (models) in particular configurations. In this case, I know I want to specifically test my two aggregation fields, so I&rsquo;ll be setting those when I use my factories in my RSpec examples. So the associations are upheld, I want to assign the newly create answers to the question that was created.</p>

<p>With my factories all setup, I&rsquo;m ready to look at my RSpec tests.</p>

<h3>RSpec, Do That Voodoo That You Do So Well</h3>

<p>Now with everything in place, let&rsquo;s write some RSpec examples. I&rsquo;m going to break this up into two sections so that it&rsquo;s easier to digest.</p>

<h4>INITIALIZATION</h4>

<p>```ruby</p>

<h1>spec/lib/aggregation_spec.rb</h1>

<p>describe &lsquo;aggregation_question&rsquo; do
  include_context &lsquo;aggregation&rsquo;</p>

<p>  describe &lsquo;Initialization&rsquo; do</p>

<pre><code>its(:prerequisites) { should include('environment') }

it 'should initialize fields to zero' do
  q = FactoryGirl.create(:question)

  q.answers_count.should be_zero
  q.approved_answers_count.should be_zero
end
</code></pre>

<p>  end</p>

<p>  # Execution</p>

<p>  end
end
```</p>

<p>So, what&rsquo;s going on here?</p>

<ul>
<li>The top level description of my example is purposely named <code>aggregation_question</code>.

<ul>
<li>If you recall, this is the name of my rake task, which will be set as the <code>subject</code>.</li>
</ul>
</li>
<li>For this to all work, I must include my shared_context we created previously.</li>
<li>I create a few examples to test out the initialization of my model.</li>
</ul>


<p>Awesome! This all works as intended. I know my rake task (<code>:aggregation_question</code>) is wired correctly due to the <code>:prerequisites</code> example. Now, onto the execution of the rake task.</p>

<h4>EXECUTION</h4>

<p>```ruby</p>

<h1>spec/lib/aggregation_spec.rb</h1>

<p>describe &lsquo;aggregation_question&rsquo; do
  include_context &lsquo;aggregation&rsquo;</p>

<pre><code># Initialization

describe 'Execution' do
before do
  (1..3).each do |n|
    question = FactoryGirl.create(:question)
    n.times  { FactoryGirl.create(:answer, question: question) }
    n.times  { FactoryGirl.create(:answer, question: question, approved: true) }

    question.set(:answers_count, 0)
    question.set(:approved_answers_count, 0)
  end
end

it 'should contain the correct instance count' do
  Question.count.should == 3
end

it 'should properly set aggregation fields for Questions' do
  Question.all.each do |q|
    q.answers_count.should be_zero
    q.approved_answers_count.should be_zero
  end

  subject.invoke

  Question.all.each_with_index do |q,i|
    q.answers_count.should == (i + 1) * 2
    q.approved_answers_count.should == i + 1
  end
end
</code></pre>

<p>  end
end
```</p>

<p>Now, onto the execution of the rake task:</p>

<ul>
<li>Using my factories, I use a loop to setup a total of three (3) questions as follows:

<ul>
<li>Q1: 2 total answers, 1 of which  is approved.</li>
<li>Q2: 4 total answers, 2 of which are approved.</li>
<li>Q3: 6 total answers, 3 of which are approved.</li>
</ul>
</li>
<li>I force my aggregation fields to 0, as counter caches are increasing upon document creation.</li>
<li>Just to be sure, I check to see that my test database has the correct number of questions.</li>
</ul>


<p>The magic all happens in my last example:</p>

<ol>
<li>First, I check to ensure all Questions I created have zero values for their aggregation fields.</li>
<li>Given that <code>subject</code> is the rake task I want to execute, I <code>invoke</code> the task, running it.</li>
<li>Based on my creation criteria, I then check to ensure all fields equal their expected values.</li>
</ol>


<p>Running these tests yields four (4) <strong>passing</strong> examples!</p>

<h2>Future Considerations</h2>

<p>Having gone through the first model in this exact fashion, I was able to write my <strong>tests first</strong> for the other models and write similar examples. However, there&rsquo;s a really big issue here that is hard to ignore.</p>

<p>While the tests are great, they in no way represent the volume of data I&rsquo;ll be finding in production. As you can see, the rake task is executed 1000 documents at a time, in serial fashion. The time this takes in unacceptable when processing millions of documents, as this data needs to be available as soon as possible. So, how can we solve this problem?</p>

<p>Stay tuned for a future blog post on how I re-did my rake task as a <code>DelayedJob</code>.</p>

<p>Thanks for reading; keep calm and carry on!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveling Up my Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby/"/>
    <updated>2014-01-23T22:37:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby</id>
    <content type="html"><![CDATA[<p>In an effort to share more with the world and write, I&rsquo;m going to give this micro-post idea a try.</p>

<h2>An Evolution Through Time</h2>

<p>It&rsquo;s been about 6 months since I&rsquo;ve started learning Ruby, and until recently, I didn&rsquo;t realize how much I had learned in such little time. Both at work and through self-study, I continue to build, define, and hone my programming knowledge. I&rsquo;ve been investing a lot of time at work with Ruby / Rails / RSpec, and decided to mix it up with some Front-End skill development off hours. Whatever path you choose on your conquest to become a better developer, be receptive to learning and stay focused.</p>

<p>It&rsquo;s a fun exercise to see how your programming skill evolves as a function of time. Recently, I was helping a friend write a scraper for the StreetEasy website. This is only a small sample of the overall code.</p>

<p>This is how I would&rsquo;ve written this portion a few months ago:</p>

<p>```ruby
class Scraper
  attr_accessor :type, # &hellip;</p>

<p>  def initialize(browser)</p>

<pre><code>@type = "rent" if browser.contains?("rent")
@type = "sale" if browser.contains?("sale")
# ...
</code></pre>

<p>  end</p>

<p>  # &hellip;
end</p>

<p>```</p>

<p>And here&rsquo;s how I wrote it a few days ago:</p>

<p>```ruby
class Scraper
  attr_reader :type, # &hellip;</p>

<p>  def initialize(browser)</p>

<pre><code>@type = browser['rent'] || 'sale'
# ...
</code></pre>

<p>  end</p>

<p>  # &hellip;
end
```</p>

<p>Let&rsquo;s look at some of the differences:</p>

<ul>
<li><code>attr_reader</code> instead of <code>attr_accessor</code>, as <code>@type</code> won&rsquo;t be changing.</li>
<li>A really cool way to search &amp; return a substring if it exists.</li>
<li>Use of the <code>||</code> operator, as I know <code>browser</code> will only ever be 1 of 2 values.</li>
<li><code>' '</code> vs <code>" "</code> for strings that will not be interpolated (Ruby best practice).</li>
<li><strong>Less Code</strong> which accomplishes the same thing more optimally.</li>
</ul>


<p>As simple as these five differences may be, they took me by surprise and made me feel amazing. The things I&rsquo;m both learning and seeing are sticking, and rather than going back and refactoring, they&rsquo;re being expressed in my code upfront. Pretty awesome!</p>

<h2>Introspect Often</h2>

<p>Amidst the chaos we know as life, I encourage you to take the time to <strong>introspect</strong>, regardless of whether you&rsquo;re new to programming or not. There are days when you feel feel down; however, remind yourself that as long as you&rsquo;ve learned something that day, you will always come out on top. Take breaks from programming (this is healthy and strongly recommended) and get regular sleep. Your body and mind need rest to be at their prime!</p>

<p>Don&rsquo;t forget that more often than not:</p>

<blockquote><p style="text-align:center;"><strong>The best teachers are also students.</strong></p></blockquote>

<p>Stay strong and continue learning, friends. Have faith in yourselves, and continue being pillars of support for each other.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Modifications in Methods]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods/"/>
    <updated>2013-10-13T10:04:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods</id>
    <content type="html"><![CDATA[<p>Every now and then, I&rsquo;ll post some cool tips and tricks I find awesome or important to know as you&rsquo;re learning the Ruby programming language. There&rsquo;s a ton out there to share, so let&rsquo;s get to it.</p>

<h2>Pass Parameters by &lsquo;Value&rsquo; or &lsquo;Reference&rsquo;</h2>

<p>Prior to learning about Ruby, my primary programming language was C++. When passing arguments to methods, most statically typed programming languages require you to <em>explicitly</em> declare variables as <strong>value</strong> or <strong>reference</strong> parameters when passed into methods.</p>

<ul>
<li>Pass by <strong>value</strong>: a <em>copy</em> of the parameter is passed into method.</li>
<li>Pass by <strong>reference</strong>: the <em>actual</em> parameter passed into method.</li>
</ul>


<p>In other words, when passed by value, the original parameter passed into the method is not changed, whereas when passing by reference, the original object may actually be changed.</p>

<h2>Object Behavior in Ruby Methods</h2>

<p>Ruby is powerful in that it is a dynamically typed language which is good for duck-typing and meta-programming. This means that you (1) don&rsquo;t have to explicitly define variable types or (2) distinguish between value / reference parameters.</p>

<p>In order to illustrate this, check out the code below:</p>

<p>```ruby
def modifyStrings(aString,anotherString)
  aString.capitalize!
  anotherString.reverse!.capitalize!</p>

<pre><code>aString.swapcase +  " " + anotherString.swapcase!
</code></pre>

<p>end
```</p>

<p>This method takes in two strings and performs modifications. It turns out that the original objects passed into this method <em>will be changed</em> as a result of the bang (!) methods performed in the strings, regardless of them being in this method scope.</p>

<p>Take a look at this code &ndash; it checks Object ID and values at different stages of the example to reinforce the fact that the original objects are being modified:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Object Modifcations in Ruby Methods (object_mods_in_ruby.rb)</span> <a href='/code/2013-10-13-grokking-on-ruby-objects-in-methods/object_mods_in_ruby.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">modifyStrings</span><span class="p">(</span><span class="n">aString</span><span class="p">,</span><span class="n">anotherString</span><span class="p">)</span>
</span><span class='line'>	<span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">aString gets capitalized(!).&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;aString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">aString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">aString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">anotherString gets reversed(!) and capitalized(!)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">anotherString</span><span class="o">.</span><span class="n">reverse!</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;anotherString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">anotherString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">anotherString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Return ::: aString swap-cased + </span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2"> + anotherString swap-cased(!)&quot;</span><span class="p">)</span>
</span><span class='line'>	<span class="n">aString</span><span class="o">.</span><span class="n">swapcase</span> <span class="o">+</span>  <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">anotherString</span><span class="o">.</span><span class="n">swapcase!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Original Ruby Objects can be modified in Methods</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">modifyStrings</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str3 =&gt; Address: </span><span class="si">#{</span><span class="n">str3</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Here is the output from the program:</p>

<p><img src="/images/posts/2013-10-13-grokking-on-ruby-objects-in-methods/ruby_obj_output.png" width="1000" height="750"></p>

<p>Following the method and the requisite output, you&rsquo;ll notice how the bang(!) methods changed the original objects (Object IDs are still the same).</p>

<h2>Summary</h2>

<p>Understanding the implications and importance of object modifications in Ruby methods is <em>critical</em> to understanding how Ruby works and will help you avoid issues in the future.</p>

<p>Happy coding!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked Lists and Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby/"/>
    <updated>2013-08-08T15:24:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby</id>
    <content type="html"><![CDATA[<p>One of the most talked about data structures in Computer Science is the <strong>Linked List</strong>.</p>

<p>So, what is a <strong>Linked List</strong> and how can we implement it in Ruby?</p>

<h2>What is a Linked List?</h2>

<p>As defined by <strong><a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia</a></strong>, a <strong>Linked List</strong> (LL) is:</p>

<blockquote><p>Data structure consisting of a group of nodes which together represent a sequence.</p></blockquote>

<p>In the simplest implementation of a LinkedList, each node has the following:</p>

<blockquote><p><strong>value</strong> = represents the value of the node (e.g. integer, Class, etc.)</p>

<p><strong>next</strong> = pointer to the next value in the sequence.</p></blockquote>

<p>In most implementations, you also have a head and a tail pointer:</p>

<blockquote><p><strong>head</strong> = points to the first Node in the linked list.</p>

<p><strong>tail</strong> = points to the last Node in the linked list.</p></blockquote>

<p>For the visual learners, here&rsquo;s a picture that shows the structure:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_layout.png" width="500" height="500"></p>

<p>Awesome &ndash; so, how can we build this in Ruby?</p>

<h2>Ruby Implementation of a Linked List</h2>

<p>Two classes are needed in order to build a Linked List: <code>Node</code> and <code>LinkedList</code></p>

<h3>Node Class</h3>

<p>Here is my implementation of the <code>Node</code> class:</p>

<p>```ruby</p>

<h1>Define a Node class that holds the following:</h1>

<h1>=> next : stores the next Node in the Linked List.</h1>

<h1>=> value: stores the value of the current list element.</h1>

<p>class Node</p>

<pre><code>attr_accessor :value, :next

def initialize(value)
    @value = value
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>LinkedList Class</h3>

<p>Here is my implementation of the <code>LinkedList</code> class:</p>

<p>```ruby</p>

<h1>Define a LinkedList class the holds the following:</h1>

<h1>=> head : pointer to the head of the Linked List.</h1>

<h1>=> tail : pointer to the tail of the Linked List.</h1>

<p>class LinkedList</p>

<pre><code>attr_accessor :head, :tail

# Initialize head and tail to same initial Node.
def initialize (head)
    raise "LinkedList must be initialized with a Node." unless head.is_a?(Node)

    @head = head
    @tail = head
end

# Insert Node after the tail of the LinkedList.
def insert(node)
    @tail.next = node
    @tail = @tail.next
end

# Print out all the values of the LinkedList in order.
def print
    current_node = @head

    while current_node != nil
        puts "\tLL Node Value = #{current_node.value}"
        current_node = current_node.next
    end
end

# Iterate through LinkedList and yield values to block.
def iterate
    if block_given?
        current_node = @head

        while current_node != nil
            yield current_node.value
            current_node = current_node.next
        end
    else
        print
    end
end
</code></pre>

<p>end</p>

<p>```</p>

<h3>TestBench</h3>

<p>Here is a quick test bench I wrote to test functionality:</p>

<p>```ruby</p>

<p>puts &ldquo;\nCreating LinkedList of 5 Node elements with values 1-5.\n&rdquo;</p>

<p>h    = Node.new(1)
list = LinkedList.new(h)</p>

<p>(2..5).each {|n| list.insert(Node.new(n)) }</p>

<p>puts &ldquo;\nCurrent values contained in LinkedList:\n&rdquo;</p>

<p>list.print</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Values of head and tail of LinkedList:\n&rdquo;</p>

<p>puts &ldquo;\tValue of LL Head = #{list.head.value}&rdquo;
puts &ldquo;\tValue of LL Tail = #{list.tail.value}&rdquo;</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Iterating through LinkedList without a block prints the list.\n&rdquo;</p>

<p>list.iterate</p>

<p>puts &ldquo;\n&rdquo;
puts &ldquo;Iterating through the LinkedList with a block runs the block on each element.\n&rdquo;</p>

<p>list.iterate {|n| puts &ldquo;\tLL Node Value squared = #{n ** 2}&rdquo;}</p>

<p>puts &ldquo;\n&rdquo;</p>

<p>```</p>

<p>Here is the output from the test bench:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_output.png" width="750" height="750"></p>

<p>Take a look at the methods I defined for:</p>

<ul>
<li>List insertion (using the <code>tail</code>) => O(1) operation.</li>
<li>Printing the list (in order).</li>
<li>List iteration (with block capability).</li>
</ul>


<p>The source code for my example is contained <a href="/code/2013-08-08-linked-lists-and-ruby/linked_list.rb">HERE</a>.</p>

<h2>More with Linked Lists</h2>

<p>The fun doesn&rsquo;t end here!</p>

<p>Check out these other types of Linked Lists:</p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/Doubly-linked-list.png" width="750" height="750"></p>

<p style="text-align:center;"> <strong>Doubly Linked Lists</strong></p>

<p style="text-align:center;"> <img src="/images/posts/2013-08-08-linked-lists-and-ruby/Circularly-linked-list.png" width="425" height="425"></p>

<p style="text-align:center;"> <strong>Circular Linked Lists</strong></p>

<p>Would you ever use a Linked List in practice, you ask?</p>

<p>It depends on your domain model. If you get the chance, look up a <a href="http://en.wikipedia.org/wiki/Sparse_matrix">sparse matrix</a>. This problem would be perfect for a linked list.</p>

<p>CJL</p>
]]></content>
  </entry>
  
</feed>
