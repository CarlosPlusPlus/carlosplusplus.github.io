---
layout: post
title: "Web Dev, Sinatra, and Me"
date: 2013-06-23 23:36
comments: true
categories: flatironschool ruby sinatra
---

After three weeks of getting to know Ruby, me and my classmates have begun our conquest of the Web Dev world. Earlier this week, we were introduced to the basics of the Internet, learning about things like messaging structure and protocols.  

## Racks on Racks on Racks

The beginning of our exploration took us to **[Rack](http://whatcodecraves.com/articles/2012/07/23/ruby-on-rack "What is Rack?")**, a simple and flexible library for building Ruby web applications and web frameworks. Learning this framework and its basics was particularly important, as we are now better poised to tame the dragon known as Sinatra.

## Sinatra (the Ruby framework, NOT the singer)

While working at the lower levels of web dev may be a roaring good time, it turns out that there are other frameworks that exist which abstract functionality levels higher than Rack. Enter the Sinatra web framework, which is installed via the terminal:

    gem install sinatra

Many tutorials exist that discuss how Sinatra is to be used. Here are a few:

->**[Beginner's tutorial for Sinatra](http://titusd.co.uk/2010/04/07/a-beginners-sinatra-tutorial/)**<-

->**[General folder structure for Sinatra Apps](http://stackoverflow.com/questions/5015471/using-sinatra-for-larger-projects-via-multiple-files)**<-

->**[Using Sinatra to start a simple Web App](http://blog.chrisblunt.com/lightweight-web-apps-getting-started-with-sinatra/)**<-

The Sinatra framework allows for straightforward generation of content and webpages via ERB (Embedded Ruby) and for simple routing that connects and joins the dynamically generated website. In terms of how the an application is laid out, let's look at a real-world example - the **[Fracture.it](http://fracture.it)** website.

## Sinatra Layout of Fracture.it Website

By navigating to the **[Fracture.it](http://fracture.it)** website, one is brought to the index.html webpage, where the user can "fracture" a URL into a smaller URL. From this main website, one can fork the repository off which it was built and see the following layout:

    config - configuration files for website (e.g. database storage).
    models - location to store classes and modules.
    public - houses website details (e.g. fonts / images / css / js).
    spec - area for testing (Rspec)
    views - contains ERB templates for dynamic website viewing.
    .gitignore - files that Git repo will ignore.
    .rspec - contains .rspec file.
    Gemfile - used with "rake bundle" to install all necessary gems. 
    app.rb - contains the primary interface for the web application.
    config.ru - allows you to run rackup command to launch web app.

As you can see, the organization of this Github repository allows for one to see exactly and precisely the files that construct a Sinatra folder structure. In fact, most Sinatra repositories are laid out the same way, allowing for standardization and for easy reading.

Looking forward to doing my own Sinatra development in the near future!  

CJL