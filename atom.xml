<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Adventure Through Code]]></title>
  <link href="http://carlosplusplus.github.io/atom.xml" rel="self"/>
  <link href="http://carlosplusplus.github.io/"/>
  <updated>2014-10-06T23:00:43-04:00</updated>
  <id>http://carlosplusplus.github.io/</id>
  <author>
    <name><![CDATA[Carlos Lazo]]></name>
    <email><![CDATA[carlos.jose.lazo@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MicroPost: Ruby's Integer #to_s Method]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/10/06/micropost-ruby-number-to-s-method/"/>
    <updated>2014-10-06T22:25:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/10/06/micropost-ruby-number-to-s-method</id>
    <content type="html"><![CDATA[<p>I&rsquo;m GOING to make time for this blog. I&rsquo;ve found tech blogging so therapeutic in the past, and it really doesn&rsquo;t need to be a huge chore. Deciding to finally saddle up and do this MicroPost idea I&rsquo;ve had for quite some time. No huge, elaborate posts &ndash; instead, small little morsels of awesome.</p>

<p>Alright, so here goes! First one is about Ruby&rsquo;s <strong>Integer#to_s</strong> (to string) method.</p>

<h3>Ruby&rsquo;s Integer#to_s Method</h3>

<p>As I continue to level up my Ruby, I continue to be amazed by the beauty of the language.</p>

<p>I remember wayyyy back in High School and even in my Digital Logic Design college courses how I would constantly use binary (base 2), octal (base 8), and hexadecimal (base 16) number systems more than decimal (base 10). As I work through <strong><a href="http://www.projecteuler.net">Project Euler</a></strong> problems for coding practice, I saw Problem 36:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;&lt;-</span><span class="no">PROBLEM</span>
</span><span class='line'>
</span><span class='line'><span class="sh">The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.</span>
</span><span class='line'><span class="sh">Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.</span>
</span><span class='line'><span class="sh">(Please note that the palindromic number, in either base, may not include leading zeros.)</span>
</span><span class='line'>
</span><span class='line'><span class="no">PROBLEM</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, makes sense &ndash; here&rsquo;s my solution first, with some cool points to follow:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">palindrome?</span>
</span><span class='line'>    <span class="nb">self</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">reverse</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_double_palindrome?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">palindrome?</span> <span class="o">&amp;&amp;</span> <span class="n">n</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">palindrome?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">solution</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">999999</span><span class="p">)</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">is_double_palindrome?</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="ss">:+</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Sum of all numbers &lt; 1E6 which are palindromic in B10 &amp; B2 = </span><span class="si">#{</span><span class="n">solution</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>I <strong>love</strong> how Ruby lets you <strong><a href="http://en.wikipedia.org/wiki/Monkey_patch">monkey-patch</a></strong> base classes like <code>String</code>.</li>
<li>Ruby&rsquo;s <code>Integer#to_s</code> <strong><a href="http://www.ruby-doc.org/core-2.1.3/Fixnum.html#method-i-to_s">method</a></strong> can take an argument, which does a numeric base conversion!</li>
<li>Methods like <code>Enumerable#select</code> [<strong><a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-select">link</a></strong>] and <code>Enumerable#inject</code> [<strong><a href="http://ruby-doc.org/core-2.1.3/Enumerable.html#method-i-inject">link</a></strong>] are <strong>so damn cool</strong>.</li>
</ol>


<p>No need for elaborate classes or modules &ndash; short, sweet, and to the point!</p>

<br>


<hr />

<p>That&rsquo;s it for this post &ndash; until next time, keep being awesome.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Synchronous Ruby Processing with DelayedJob]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/02/22/synchronous-ruby-tasks-with-delayedjob/"/>
    <updated>2014-02-22T12:00:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/02/22/synchronous-ruby-tasks-with-delayedjob</id>
    <content type="html"><![CDATA[<p>As promised in my previous entry, it&rsquo;s time to talk about how one can better optimize asynchronous tasks in the Ruby programming language via <strong>DelayedJob</strong>. If you haven&rsquo;t already, I strongly recommend you read my <strong><a href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/">last blog post</a></strong>, as I will be using the example presented there.</p>

<p>So, what the deal with <em>synchronization</em> and why should we care?</p>

<h2>Asynchronous&hellip; Synchronous&hellip; Huh?</h2>

<p>Let&rsquo;s first take a look at what these two words mean, in their simplest forms:</p>

<blockquote><p><strong>Asynchronous</strong> &ndash; NOT occurring at the same time.</p>

<p><strong>Synchronous</strong> &ndash;  occurring at the same time.</p></blockquote>

<p>When we first start learning Ruby, or most programming languages, we are taught to think of events as asynchronous. In other words, a program is:</p>

<ol>
<li>Executed in the order it is written.</li>
<li>Run from top-to-bottom in a serial, non-parallel fashion.</li>
<li>The next line runs after the previous completes.</li>
</ol>


<p>There are, however, situations where you may want to think synchronously. In other words, perhaps it may be preferable for events to happen at the same time, or more commonly, <strong>in the background</strong>. This would allow your web application to keep servicing operations while intense work was being performed elsewhere. A few uses cases for this may be:</p>

<ul>
<li>Batch imports of updates to your database.</li>
<li>HTTP downloads (steaming intensive operations).</li>
<li>Image resizing (size intensive operations).</li>
<li>Sending mass emails (newsletters) to your user base.</li>
</ul>


<p>Let&rsquo;s explore the use case for batch updates as it relates to Rails rake tasks.</p>

<h2>Issue with Previous Rake Task Implementation</h2>

<p>As described in my <strong><a href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/">last blog post</a></strong>, I implemented a set of Rake tasks that recomputed custom counter caches for some of my Rails models. While the solution certainly solved the problem, it was implemented in an asynchronous fashion. In other words, each <strong>unit of work</strong> needed to complete before the previous one. In this case, a unit of work was equal to one model having its counter caches recomputed.</p>

<p>To highlight the severity of the issue, here&rsquo;s a look at what the full rake task does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:mongo_import</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">MODELS</span>    <span class="o">||=</span> <span class="sx">%w(answer comment question resource)</span>
</span><span class='line'>  <span class="no">WORK_SIZE</span> <span class="o">||=</span> <span class="mi">1000</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Rebuilds ALL aggregation columns and counter caches.&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:aggregation</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">MODELS</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">model</span><span class="o">|</span> <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;mongo_import:aggregation_</span><span class="si">#{</span><span class="n">model</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">].</span><span class="n">invoke</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there are a total of four (4) rake tasks that will be run in sequence, each with varying levels of work based on the number of models present in the database and the amount of counter caches for each model. Given that this work needs to be done while the data set is in production, these rake tasks need to finish fast &ndash; this is impossible with the current implementation. Wouldn&rsquo;t it be great if there was a way to split up this work and run these tasks in parallel, or synchronously, in order to get the task done faster?</p>

<p>Let&rsquo;s see what <code>DelayedJob</code> can do for us.</p>

<h2>DelayedJob to the Rescue</h2>

<p>For those who have never heard of or used <code>DelayedJob</code>, I recommend you check out the following resources: <strong><a href="https://github.com/collectiveidea/delayed_job">DelayedJob Github Repository</a></strong> and <strong><a href="http://railscasts.com/episodes/171-delayed-job">RailsCast on DelayedJob</a></strong>. DelayedJob integrates pretty seamlessly with Rails applications and different database configurations, like SQLite3 and MongoDB. The documentation provides great use cases for when / why you would want to use this service.</p>

<h3>Background Process and Workers</h3>

<p>I won&rsquo;t go into the specific implementation detail getting setup with DelayedJob (check out the documentation), but I do want to mention a few key concepts that are important:</p>

<blockquote><p><strong>Enqueue</strong>: add unit of work to DelayedJob priority queue for processing.</p>

<p><strong>Perform</strong>: method required for DelayedJob to recognize class as actionable.</p>

<p><strong>Workers</strong>: specific background processes setup to handle <strong>units of work</strong>.</p></blockquote>

<p>At the high level, your processing work flow will probably look something like this:</p>

<ol>
<li>Spin up an amount of workers based on (a) server capability and (b) need.</li>
<li>Enqueue DelayedJobs whenever required (e.g. mass mailings and rake tasks).</li>
<li>Workers will perform queued up jobs as soon as they are &lsquo;free&rsquo; for processing.</li>
</ol>


<p>Great &ndash; let&rsquo;s dive into some code and see how I re-did my rake task.</p>

<h3>Plan of Attack</h3>

<p>The following was the original <strong>asynchronous</strong> code. Notice how each individual model must be updated before the next one can be processed. This is a great time to think about <strong><a href="http://en.wikipedia.org/wiki/Big_O_notation">O(n)</a></strong> &ndash; in other words, how would this algorithm (loop) perform as <code>Question.all</code> gets infinitely large? With the current implementation, not too well &ndash; it would act as a bottleneck for the application, potentially halting other requests from being served:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Aggregation Task for: Question&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:aggregation_question</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Question</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">batch_size</span><span class="p">(</span><span class="no">WORK_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>    <span class="n">attrs</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">answers_count</span>          <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">approved_answers_count</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:answers_count</span><span class="o">]</span>          <span class="o">=</span> <span class="n">answers_count</span>          <span class="k">unless</span> <span class="n">answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:approved_answers_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">approved_answers_count</span> <span class="k">unless</span> <span class="n">approved_answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Question</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">q</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span> <span class="k">unless</span> <span class="n">attrs</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What I want to do is abstract the computation itself to a <code>DelayedJob</code> task. Instead of processing on <code>Question.all</code> asynchronously, let&rsquo;s use the current <code>WORK_SIZE</code> constant to <code>slice</code> models in groups and <code>enqueue</code> them via DelayedJob. It&rsquo;s also important to be mindful of making optimized database calls, as you don&rsquo;t want to be slamming your database with unnecessary processing.</p>

<p>Now with our plan of attack in place, let&rsquo;s get to work.</p>

<h3>Rake Task Implementation via DelayedJob</h3>

<p>Even though this blog post will only cover the rake task for the <code>Question</code> model, I know that I&rsquo;ll want to mimic this same structure for all four (4) of my rake tasks. Let&rsquo;s take advantage of some <strong>inheritance</strong> by creating a <code>AggregationRootJob</code> which will take care of our storing our id slices:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/mongo_migrator/aggregation_root_job.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">MongoMigrator</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AggregationRootJob</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:ids</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@ids</span> <span class="o">=</span> <span class="n">ids</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember all that logic I used to have in my core rake task for the model?
Let&rsquo;s abstract that out to a class, called <code>AggregationQuestionJob</code>, which uses the <code>ids</code> attribute from <code>AggregationRootJob</code> to perform work on specific models in the database.</p>

<p>In order for this class to be recognized by DelayedJob, it must contain a <code>perform</code> method, which will be responsible for performing the specific unit of work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MongoMigrator</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">AggregationQuestionJob</span> <span class="o">&lt;</span> <span class="no">AggregationRootJob</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">perform</span>
</span><span class='line'>      <span class="no">Question</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span><span class="o">.</span><span class="n">in</span> <span class="o">=&gt;</span> <span class="n">ids</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>        <span class="n">attrs</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">answers_count</span>          <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>        <span class="n">approved_answers_count</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">attrs</span><span class="o">[</span><span class="ss">:answers_count</span><span class="o">]</span>          <span class="o">=</span> <span class="n">answers_count</span>          <span class="k">unless</span> <span class="n">answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>        <span class="n">attrs</span><span class="o">[</span><span class="ss">:approved_answers_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">approved_answers_count</span> <span class="k">unless</span> <span class="n">approved_answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>
</span><span class='line'>        <span class="no">Question</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">q</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span> <span class="k">unless</span> <span class="n">attrs</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with all this setup, we can finally rewrite our aggregation rake task as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Aggregation task for: Question&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:aggregation_question</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Question</span><span class="o">.</span><span class="n">only</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span><span class="o">.</span><span class="n">batch_size</span><span class="p">(</span><span class="no">WORK_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">each_slice</span><span class="p">(</span><span class="no">WORK_SIZE</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">batch</span><span class="o">|</span>
</span><span class='line'>      <span class="ss">Delayed</span><span class="p">:</span><span class="ss">:Job</span><span class="o">.</span><span class="n">enqueue</span><span class="p">(</span><span class="ss">MongoMigrator</span><span class="p">:</span><span class="ss">:AggregationQuestionJob</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">batch</span><span class="o">.</span><span class="n">collect</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:id</span><span class="p">)))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Holy nested statements Batman!</strong> Let&rsquo;s break down what this is doing:</p>

<ol>
<li>Since I know I&rsquo;m iterating over my database, I&rsquo;ve optimized my Mongoid (MongoDB) query.

<ul>
<li>For each question, load only the <code>id</code> field, as that&rsquo;s all I need.</li>
<li>Load models into memory in batches of 1000 via <code>each_slice</code> method.</li>
</ul>
</li>
<li>For each batch, generate an array of all model id&rsquo;s via <code>collect(&amp;:id)</code>.</li>
<li>Pass the id array into a new <code>AggregationQuestionJob</code> via <code>initialize</code> method.</li>
<li>Enqueue the job via <code>Delayed::Job.enqueue</code> for workers to process when ready.</li>
<li>Sit back, relax, and profit.</li>
</ol>


<p>Now, instead of processing each individual job one by one, a queue of DelayedJobs waiting to be processed by workers is built as fast as possible. Pretty awesome!</p>

<h3>The Awesome Doesn&rsquo;t End Here!</h3>

<p>It&rsquo;s also worth noting that <code>DelayedJob</code> gives you a some cool tricks via the <code>enqueue</code> method:</p>

<blockquote><p><strong><a href="https://github.com/collectiveidea/delayed_job#hooks">Hooks</a></strong> &ndash; methods similar to ActiveRecord callbacks (e.g. after, before, failure, success).</p>

<p><strong><a href="https://github.com/collectiveidea/delayed_job#named-queues">Named Queues</a></strong> &ndash; you can have multiple queues with custom worker assignments to each.</p>

<p><strong><a href="https://github.com/collectiveidea/delayed_job#gory-details">Priority</a></strong> &ndash; set the relative priority of your Jobs for your worker processing.</p></blockquote>

<p>I recommend checking these out and taking advantage of this customization!</p>

<h2>Closing Thoughts</h2>

<p>To give you an idea of how much this improved the rake task&rsquo;s performance &ndash; with 2 workers, from start to end, the time went from 200 minutes (~3hrs) to 20 minutes, a <strong>10x improvement</strong>! And this was only on my development server &ndash; me and my team are planning to spin up more workers in production to (1) improve performance and (2) decrease overall downtime while this migration is happening.</p>

<p><code>DelayedJob</code> is an incredible tool you should definitely consider trying out.</p>

<p>Keep calm and carry on!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Rake Tasks with RSpec]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec/"/>
    <updated>2014-02-01T08:00:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/02/01/testing-rake-tasks-with-rspec</id>
    <content type="html"><![CDATA[<p>One of the projects I&rsquo;m currently supporting at work involves migrating an entire database from the <a href="http://www.oracle.com/index.html">Oracle</a> framework to the <a href="http://www.mongodb.org/">MongoDB</a> framework. This Rails application is crucial in that it serves as one of the primary JSON APIs for my company&rsquo;s web services.</p>

<p>My colleagues had written an import task which will takes the (deprecated) Oracle versions of our models and migrate them to the new MongoDB representations. However, there are aggregation columns and custom <a href="http://railscasts.com/episodes/23-counter-cache-column">counter caches</a> that must be recomputed once the migration is done. I was asked to write a rake task to perform this operation on all relevant models. It was also recommended I find a way to test this locally, as the task was going to be performed on millions of rows of data in production, making it imperative to get it right the first time.</p>

<p>This blog post assumes some knowledge about <a href="https://github.com/thoughtbot/factory_girl">FactoryGirl</a> and <a href="http://relishapp.com/rspec">RSpec</a> for testing purposes. Be sure to read up on these incredible testing tools in Ruby if you haven&rsquo;t used them before.</p>

<p>Alright, time to dive in head first. Let&rsquo;s first talk about our model.</p>

<h2>The Model Space</h2>

<p>The Rails model I&rsquo;ll be using is <strong>Question</strong>. The <code>Mongoid</code> Ruby driver is used instead of <code>ActiveRecord</code> &ndash; I&rsquo;ll do my best to explain any Mongoid syntax in case you have never worked with MongoDB.</p>

<p>Here are the parts of the <strong>Question</strong> model we care about in the Rails app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/models/question.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Question</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:answers_count</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:approved_answers_count</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="nb">Integer</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:answers</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what&rsquo;s happening with the code above?</p>

<ul>
<li>With Mongoid, we include the <code>Mongoid::Document</code> module.

<ul>
<li>An individual instance of a model is known as a <code>document</code>.</li>
<li>The group of all Question models is known as a <code>collection</code>.</li>
</ul>
</li>
<li>With Mongoid, our schema is defined <strong>within the model</strong>.

<ul>
<li>This means there are no migrations to run.</li>
<li>We define fields: <code>answers_count</code> and <code>approved_answers_count</code>.</li>
</ul>
</li>
<li>This model <code>has_many: answers</code>, so <code>question.answers</code> should yield me its answers.</li>
</ul>


<p>Great! Now let&rsquo;s look at the rake task that will recompute those fields.</p>

<h2>Rake Task to Compute Aggregation Fields</h2>

<p>Let&rsquo;s get right to it and look at the rake task I wrote to re-compute these fields:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/tasks/aggregation.rake</span>
</span><span class='line'><span class="no">WORK_SIZE</span> <span class="o">||=</span> <span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'><span class="n">desc</span> <span class="s1">&#39;Aggregation Task for: Question&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:aggregation_question</span> <span class="o">=&gt;</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Question</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">batch_size</span><span class="p">(</span><span class="no">WORK_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>    <span class="n">attrs</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">answers_count</span>          <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>    <span class="n">approved_answers_count</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="n">answers</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:answers_count</span><span class="o">]</span>          <span class="o">=</span> <span class="n">answers_count</span>          <span class="k">unless</span> <span class="n">answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">[</span><span class="ss">:approved_answers_count</span><span class="o">]</span> <span class="o">=</span> <span class="n">approved_answers_count</span> <span class="k">unless</span> <span class="n">approved_answers_count</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Question</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">q</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span> <span class="k">unless</span> <span class="n">attrs</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s dissect what&rsquo;s happening above:</p>

<ul>
<li>I define <code>WORK_SIZE</code> to control the # of Questions I load at a time.

<ul>
<li>Attempting to load all models into memory at once is NOT recommended.</li>
</ul>
</li>
<li>Each field is computed and added to the <code>attrs</code> hash if it&rsquo;s non-zero.

<ul>
<li>Recall how the model defaults these to 0 &ndash; no need to update if not needed, right?</li>
</ul>
</li>
<li>In order to perform just one vs. multiple updates, I pass in my hash to update if non-empty.

<ul>
<li>This query is *optimized** via Mongoid / MongoDB. You&rsquo;ll have to believe me here.</li>
</ul>
</li>
</ul>


<p>Great, so now I have a rake task built. How can I test this?</p>

<h2>Contextual Magic with FactoryGirl and RSpec</h2>

<p>I have to give credit where it&rsquo;s due &ndash; this post titled <strong><a href="http://robots.thoughtbot.com/test-rake-tasks-like-a-boss">How to Test Rake Tasks Like a BOSS</a></strong> from <a href="http://www.thoughtbot.com">ThoughtBot</a> made this all possible, with a few modifications. Please read this post for a more in-depth explanation at how this upcoming RSpec context works.</p>

<h3>Sharing is Caring via RSpec Context</h3>

<p>Since I knew I was going to be performing this operation across multiple models (all with different fields), I started out by making an RSpec context (as described in the blog post):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/support/shared_contexts/aggregation.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">shared_context</span> <span class="s1">&#39;aggregation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:rake</span><span class="p">)</span>      <span class="p">{</span> <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:task_name</span><span class="p">)</span> <span class="p">{</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">top_level_description</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:task_path</span><span class="p">)</span> <span class="p">{</span> <span class="s2">&quot;lib/tasks/aggregation&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">subject</span>         <span class="p">{</span> <span class="n">rake</span><span class="o">[</span><span class="n">task_name</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">loaded_files_excluding_current_rake_file</span>
</span><span class='line'>    <span class="vg">$&quot;</span><span class="o">.</span><span class="n">reject</span> <span class="p">{</span><span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">file</span> <span class="o">==</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">task_path</span><span class="si">}</span><span class="s2">.rake&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">.</span><span class="n">application</span> <span class="o">=</span> <span class="n">rake</span>
</span><span class='line'>    <span class="no">Rake</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">rake_require</span><span class="p">(</span><span class="n">task_path</span><span class="p">,</span> <span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span><span class="p">,</span> <span class="n">loaded_files_excluding_current_rake_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">.</span><span class="n">define_task</span><span class="p">(</span><span class="ss">:environment</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the lines we care the most about:</p>

<ul>
<li><code>let(:task_name)</code> => my task_name will equal the top level description of my RSpec example.</li>
<li><code>let(:task_path)</code> => here&rsquo;s where I link to my aggregation.rake file.</li>
<li><code>subject { ... }</code> => the subject in my RSpec example will be set to my specifc rake task.</li>
</ul>


<p>This context is automagically loaded in all specs thanks to this line in <code>spec_helper.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with this context setup, let&rsquo;s move onto the Factories.</p>

<h3>It&rsquo;s a Bird&hellip; It&rsquo;s a Plane&hellip; It&rsquo;s FactoryGirl!</h3>

<p>In my RSpec tests, you will see things like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:question</span><span class="p">)</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:answer</span><span class="p">,</span> <span class="ss">question</span><span class="p">:</span> <span class="n">question</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:answer</span><span class="p">,</span> <span class="ss">question</span><span class="p">:</span> <span class="n">question</span><span class="p">,</span> <span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Factories are defined elsewhere that give me the flexibility to create new documents (models) in particular configurations. In this case, I know I want to specifically test my two aggregation fields, so I&rsquo;ll be setting those when I use my factories in my RSpec examples. So the associations are upheld, I want to assign the newly create answers to the question that was created.</p>

<p>With my factories all setup, I&rsquo;m ready to look at my RSpec tests.</p>

<h3>RSpec, Do That Voodoo That You Do So Well</h3>

<p>Now with everything in place, let&rsquo;s write some RSpec examples. I&rsquo;m going to break this up into two sections so that it&rsquo;s easier to digest.</p>

<h4>INITIALIZATION</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/lib/aggregation_spec.rb</span>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;aggregation_question&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_context</span> <span class="s1">&#39;aggregation&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;Initialization&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">its</span><span class="p">(</span><span class="ss">:prerequisites</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;environment&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should initialize fields to zero&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">q</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:question</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">q</span><span class="o">.</span><span class="n">answers_count</span><span class="o">.</span><span class="n">should</span> <span class="n">be_zero</span>
</span><span class='line'>      <span class="n">q</span><span class="o">.</span><span class="n">approved_answers_count</span><span class="o">.</span><span class="n">should</span> <span class="n">be_zero</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Execution</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what&rsquo;s going on here?</p>

<ul>
<li>The top level description of my example is purposely named <code>aggregation_question</code>.

<ul>
<li>If you recall, this is the name of my rake task, which will be set as the <code>subject</code>.</li>
</ul>
</li>
<li>For this to all work, I must include my shared_context we created previously.</li>
<li>I create a few examples to test out the initialization of my model.</li>
</ul>


<p>Awesome! This all works as intended. I know my rake task (<code>:aggregation_question</code>) is wired correctly due to the <code>:prerequisites</code> example. Now, onto the execution of the rake task.</p>

<h4>EXECUTION</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/lib/aggregation_spec.rb</span>
</span><span class='line'><span class="n">describe</span> <span class="s1">&#39;aggregation_question&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">include_context</span> <span class="s1">&#39;aggregation&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Initialization</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;Execution&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>        <span class="n">question</span> <span class="o">=</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:question</span><span class="p">)</span>
</span><span class='line'>        <span class="n">n</span><span class="o">.</span><span class="n">times</span>  <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:answer</span><span class="p">,</span> <span class="ss">question</span><span class="p">:</span> <span class="n">question</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">n</span><span class="o">.</span><span class="n">times</span>  <span class="p">{</span> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:answer</span><span class="p">,</span> <span class="ss">question</span><span class="p">:</span> <span class="n">question</span><span class="p">,</span> <span class="ss">approved</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">question</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:answers_count</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">question</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="ss">:approved_answers_count</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should contain the correct instance count&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Question</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;should properly set aggregation fields for Questions&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">Question</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="o">|</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">answers_count</span><span class="o">.</span><span class="n">should</span> <span class="n">be_zero</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">approved_answers_count</span><span class="o">.</span><span class="n">should</span> <span class="n">be_zero</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">subject</span><span class="o">.</span><span class="n">invoke</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Question</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">q</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">answers_count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>        <span class="n">q</span><span class="o">.</span><span class="n">approved_answers_count</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, onto the execution of the rake task:</p>

<ul>
<li>Using my factories, I use a loop to setup a total of three (3) questions as follows:

<ul>
<li>Q1: 2 total answers, 1 of which  is approved.</li>
<li>Q2: 4 total answers, 2 of which are approved.</li>
<li>Q3: 6 total answers, 3 of which are approved.</li>
</ul>
</li>
<li>I force my aggregation fields to 0, as counter caches are increasing upon document creation.</li>
<li>Just to be sure, I check to see that my test database has the correct number of questions.</li>
</ul>


<p>The magic all happens in my last example:</p>

<ol>
<li>First, I check to ensure all Questions I created have zero values for their aggregation fields.</li>
<li>Given that <code>subject</code> is the rake task I want to execute, I <code>invoke</code> the task, running it.</li>
<li>Based on my creation criteria, I then check to ensure all fields equal their expected values.</li>
</ol>


<p>Running these tests yields four (4) <strong>passing</strong> examples!</p>

<h2>Future Considerations</h2>

<p>Having gone through the first model in this exact fashion, I was able to write my <strong>tests first</strong> for the other models and write similar examples. However, there&rsquo;s a really big issue here that is hard to ignore.</p>

<p>While the tests are great, they in no way represent the volume of data I&rsquo;ll be finding in production. As you can see, the rake task is executed 1000 documents at a time, in serial fashion. The time this takes in unacceptable when processing millions of documents, as this data needs to be available as soon as possible. So, how can we solve this problem?</p>

<p>Stay tuned for a future blog post on how I re-did my rake task as a <code>DelayedJob</code>.</p>

<p>Thanks for reading; keep calm and carry on!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leveling Up my Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby/"/>
    <updated>2014-01-23T22:37:00-05:00</updated>
    <id>http://carlosplusplus.github.io/blog/2014/01/23/leveling-up-my-ruby</id>
    <content type="html"><![CDATA[<p>In an effort to share more with the world and write, I&rsquo;m going to give this micro-post idea a try.</p>

<h2>An Evolution Through Time</h2>

<p>It&rsquo;s been about 6 months since I&rsquo;ve started learning Ruby, and until recently, I didn&rsquo;t realize how much I had learned in such little time. Both at work and through self-study, I continue to build, define, and hone my programming knowledge. I&rsquo;ve been investing a lot of time at work with Ruby / Rails / RSpec, and decided to mix it up with some Front-End skill development off hours. Whatever path you choose on your conquest to become a better developer, be receptive to learning and stay focused.</p>

<p>It&rsquo;s a fun exercise to see how your programming skill evolves as a function of time. Recently, I was helping a friend write a web scraper. This is only a small sample of the overall code.</p>

<p>This is how I would&rsquo;ve written this portion a few months ago:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Scraper</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:type</span><span class="p">,</span> <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">browser</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@type</span> <span class="o">=</span> <span class="s2">&quot;rent&quot;</span> <span class="k">if</span> <span class="n">browser</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="s2">&quot;rent&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@type</span> <span class="o">=</span> <span class="s2">&quot;sale&quot;</span> <span class="k">if</span> <span class="n">browser</span><span class="o">.</span><span class="n">contains?</span><span class="p">(</span><span class="s2">&quot;sale&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s how I wrote it a few days ago:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Scraper</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:type</span><span class="p">,</span> <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">browser</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="n">browser</span><span class="o">[</span><span class="s1">&#39;rent&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;sale&#39;</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s look at some of the differences:</p>

<ul>
<li><code>attr_reader</code> instead of <code>attr_accessor</code>, as <code>@type</code> won&rsquo;t be changing.</li>
<li>A really cool way to search &amp; return a substring if it exists.</li>
<li>Use of the <code>||</code> operator, as I know <code>browser</code> will only ever be 1 of 2 values.</li>
<li><code>' '</code> vs <code>" "</code> for strings that will not be interpolated (Ruby best practice).</li>
<li><strong>Less Code</strong> which accomplishes the same thing more optimally.</li>
</ul>


<p>As simple as these five differences may be, they took me by surprise and made me feel amazing. The things I&rsquo;m both learning and seeing are sticking, and rather than going back and refactoring, they&rsquo;re being expressed in my code upfront. Pretty awesome!</p>

<h2>Introspect Often</h2>

<p>Amidst the chaos we know as life, I encourage you to take the time to <strong>introspect</strong>, regardless of whether you&rsquo;re new to programming or not. There are days when you feel feel down; however, remind yourself that as long as you&rsquo;ve learned something that day, you will always come out on top. Take breaks from programming (this is healthy and strongly recommended) and get regular sleep. Your body and mind need rest to be at their prime!</p>

<p>Don&rsquo;t forget that more often than not:</p>

<blockquote><p style="text-align:center;"><strong>The best teachers are also students.</strong></p></blockquote>

<p>Stay strong and continue learning, friends. Have faith in yourselves, and continue being pillars of support for each other.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object Modifications in Methods]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods/"/>
    <updated>2013-10-13T10:04:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/10/13/grokking-on-ruby-objects-in-methods</id>
    <content type="html"><![CDATA[<p>Every now and then, I&rsquo;ll post some cool tips and tricks I find awesome or important to know as you&rsquo;re learning the Ruby programming language. There&rsquo;s a ton out there to share, so let&rsquo;s get to it.</p>

<h2>Pass Parameters by &lsquo;Value&rsquo; or &lsquo;Reference&rsquo;</h2>

<p>Prior to learning about Ruby, my primary programming language was C++. When passing arguments to methods, most statically typed programming languages require you to <em>explicitly</em> declare variables as <strong>value</strong> or <strong>reference</strong> parameters when passed into methods.</p>

<ul>
<li>Pass by <strong>value</strong>: a <em>copy</em> of the parameter is passed into method.</li>
<li>Pass by <strong>reference</strong>: the <em>actual</em> parameter passed into method.</li>
</ul>


<p>In other words, when passed by value, the original parameter passed into the method is not changed, whereas when passing by reference, the original object may actually be changed.</p>

<h2>Object Behavior in Ruby Methods</h2>

<p>Ruby is powerful in that it is a dynamically typed language which is good for duck-typing and meta-programming. This means that you (1) don&rsquo;t have to explicitly define variable types or (2) distinguish between value / reference parameters.</p>

<p>In order to illustrate this, check out the code below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">modifyStrings</span><span class="p">(</span><span class="n">aString</span><span class="p">,</span><span class="n">anotherString</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="n">anotherString</span><span class="o">.</span><span class="n">reverse!</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">swapcase</span> <span class="o">+</span>  <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">anotherString</span><span class="o">.</span><span class="n">swapcase!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This method takes in two strings and performs modifications. It turns out that the original objects passed into this method <em>will be changed</em> as a result of the bang (!) methods performed in the strings, regardless of them being in this method scope.</p>

<p>Take a look at this code &ndash; it checks Object ID and values at different stages of the example to reinforce the fact that the original objects are being modified:</p>

<figure class='code'><figcaption><span>Object Modifcations in Ruby Methods (object_mods_in_ruby.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-10-13-grokking-on-ruby-objects-in-methods/object_mods_in_ruby.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">def</span> <span class="nf">modifyStrings</span><span class="p">(</span><span class="n">aString</span><span class="p">,</span><span class="n">anotherString</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">aString gets capitalized(!).&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;aString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">aString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">aString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">anotherString gets reversed(!) and capitalized(!)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">anotherString</span><span class="o">.</span><span class="n">reverse!</span><span class="o">.</span><span class="n">capitalize!</span>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;anotherString =&gt;</span><span class="se">\n\t</span><span class="s2">Address: </span><span class="si">#{</span><span class="n">anotherString</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">anotherString</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Return ::: aString swap-cased + </span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2"> + anotherString swap-cased(!)&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">aString</span><span class="o">.</span><span class="n">swapcase</span> <span class="o">+</span>  <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="n">anotherString</span><span class="o">.</span><span class="n">swapcase!</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str1</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="n">str2</span> <span class="o">=</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Original Ruby Objects can be modified in Methods</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">str3</span> <span class="o">=</span> <span class="n">modifyStrings</span><span class="p">(</span><span class="n">str1</span><span class="p">,</span><span class="n">str2</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">#############################################</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str1 =&gt; Address: </span><span class="si">#{</span><span class="n">str1</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str1</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str2 =&gt; Address: </span><span class="si">#{</span><span class="n">str2</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="s2">&quot;Str3 =&gt; Address: </span><span class="si">#{</span><span class="n">str3</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">, Value: </span><span class="si">#{</span><span class="n">str3</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the output from the program:</p>

<p><img src="http://carlosplusplus.github.io/images/posts/2013-10-13-grokking-on-ruby-objects-in-methods/ruby_obj_output.png" width="1000" height="750"></p>

<p>Following the method and the requisite output, you&rsquo;ll notice how the bang(!) methods changed the original objects (Object IDs are still the same).</p>

<h2>Summary</h2>

<p>Understanding the implications and importance of object modifications in Ruby methods is <em>critical</em> to understanding how Ruby works and will help you avoid issues in the future.</p>

<p>Happy coding!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProTips on Finding a Job in Engineering]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/09/24/tips-on-finding-a-job-in-engineering/"/>
    <updated>2013-09-24T07:31:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/09/24/tips-on-finding-a-job-in-engineering</id>
    <content type="html"><![CDATA[<p>Whether you&rsquo;re experienced or completely new to the world of engineering, finding that new job can be a daunting task. Either way, congratulations for getting this far!</p>

<h2>On the Hunt</h2>

<p>Having worked as a professional engineer for the past five years of my career, I&rsquo;ve accumulated a few sources / websites that, when combined, have proven extremely useful. However, prior to the actual job hunt, <strong>preparation</strong> is absolutely everything.</p>

<h2>Preparation for the Uphill Battle</h2>

<p>Here are a few tips I&rsquo;ve found really helpful to know prior to starting the job hunt:</p>

<ul>
<li><strong>Know what you want.</strong>

<ul>
<li>The more specific your search criteria, the better.</li>
<li>Casting a wide net is good, but always remain focused.</li>
<li>Be realistic &ndash; go for jobs for which you are qualified to apply.</li>
</ul>
</li>
<li><strong>Know what you&rsquo;re worth.</strong>

<ul>
<li>What are people in the position you&rsquo;re making normally make?</li>
<li>Are you an entry / senior level developer? What is your experience worth?</li>
<li>Does your cost of living play a factor?</li>
</ul>
</li>
<li><strong>Be prepared for interviewing, both behavioral and technical.</strong>

<ul>
<li>Go over the typical behavioral interviewing questions.

<ul>
<li>Have answers to all of these before coming into the interview.</li>
<li>This should actually be the easiest part of the interview.</li>
</ul>
</li>
<li>Review technical material and <strong>practice</strong> in expected formats (e.g. white-boarding).</li>
</ul>
</li>
</ul>


<p>With those things figured out, it&rsquo;s time to work on your presentation.</p>

<h3>RESUME</h3>

<ul>
<li>Your resume needs to be the best it has ever been.</li>
<li>This is a way for you to tell your story in a creative, professional way.</li>
<li>Be <strong>accurate</strong> and only post <strong>relevant information</strong> for the job in question.

<ul>
<li>Resumes should be <strong>tailored</strong> for each job position.</li>
</ul>
</li>
<li>Be <strong>specific</strong> with details and <strong>quantify</strong> wherever possible.</li>
<li>Hiring people normally spend 30-45 sec on your resume. <strong>Make it count!</strong></li>
<li>In many cases, it&rsquo;s recommended to have a matching <strong>Cover Letter</strong>.</li>
</ul>


<h3>LINKEDIN PROFILE</h3>

<ul>
<li>Your LinkedIn profile needs to be <strong>accurate</strong> and <strong>polished</strong>.</li>
<li>LinkedIn Profile != Resume.

<ul>
<li>LinkedIn can and should house way more information than your resume.</li>
<li>They should both <strong>tell the same story</strong> in different formats.</li>
</ul>
</li>
<li>I&rsquo;d recommend uploading a PDF version of your resume here.</li>
<li>Invest the time in making this amazing&hellip; you never know!</li>
</ul>


<p>Now that you&rsquo;re poised for success, onto resources that will aid in the quest for glory.</p>

<h2>Useful Resources</h2>

<p>Here&rsquo;s a list of resources I&rsquo;ve compiled over the years that help with finding jobs in engineering. If you find others, please let me know and I will add them to the list.</p>

<h3>Job Boards</h3>

<p>This is my list of job boards / websites:</p>

<blockquote><p><strong><a href="http://www.indeed.com">INDEED</a></strong></p></blockquote>

<ul>
<li>Pings a variety of job search engines based on location and salary options.</li>
<li>Keyword searches here are incredible at downsizing your job options.</li>
<li>Use the &lsquo;sort by relevance / sort by date&rsquo; feature tactically.</li>
</ul>


<blockquote><p><strong><a href="http://www.dice.com">DICE</a></strong></p></blockquote>

<ul>
<li>Specifically for jobs in engineering &amp; technology &ndash; great jobs on here.</li>
<li>Much like Indeed, keyword searches here are your friend &ndash; be specific when possible.</li>
</ul>


<blockquote><p><strong><a href="http://www.linkedin.com">LINKEDIN</a></strong></p></blockquote>

<ul>
<li>Has a variety of job postings, which many don&rsquo;t know.</li>
<li>As stated in the previous section, invest the time into creating a good profile.</li>
</ul>


<blockquote><p><strong><a href="http://www.glassdoor.com">GLASSDOOR</a></strong></p></blockquote>

<ul>
<li>Great lookup for company (1) satisfaction, (2) salary info, and (3) interview questions.</li>
<li>Also a portal to many job requisitions, so be sure to look at those.</li>
</ul>


<blockquote><p><strong><a href="http://www.monster.com">MONSTER</a></strong></p></blockquote>

<ul>
<li>Once you have your resume set, upload it to Monster.com and specify location of interest.</li>
<li>You should start getting an influx of emails / phone calls from recruiters.</li>
<li>This helped me in two ways: (a) great practice and (b) helped me figure out my &ldquo;worth&rdquo;.</li>
</ul>


<h3>Startup Sites</h3>

<p>This is my list of startup websites:</p>

<blockquote><p><strong><a href="http://www.startuply.com">STARTUPLY</a></strong></p></blockquote>

<ul>
<li>This is an amazing resource for those interested in exploring startup jobs.</li>
<li>Searching the database by city (location) will yield good results.</li>
</ul>


<blockquote><p><strong><a href="http://www.insidestartups.org">INSIDE STARTUPS</a></strong></p></blockquote>

<ul>
<li>Another great resource for startups based on city (location).</li>
</ul>


<blockquote><p><strong><a href="https://angel.co/jobs">ANGEL LIST JOBS</a></strong></p></blockquote>

<ul>
<li>Search for startups in your area based on city (location).</li>
<li>By filling out the profile, companies may reach out to you.</li>
</ul>


<blockquote><p><strong><a href="http://wearemadeinny.com/find-a-job/">MADE IN NY</a></strong></p></blockquote>

<ul>
<li>Awesome website specific to jobs in NYC startups.</li>
<li>The Job Search page is amazing (e.g. sort by companies hiring.)</li>
</ul>


<h3>Meetups / Networking</h3>

<p>Wanted to spend some time here talking about Meetups and Networking.</p>

<p>Nothing beats &lsquo;old school&rsquo; networking. Whether getting coffee, making a &lsquo;cold call&rsquo;, or sending an email expressing interest, it&rsquo;s up to you to do this. Sure, it may not be in your comfort zone, but you want that job, right? Stay confident and network!</p>

<p>One of my favorite ways of expanding my network is through attending programming meetups and hackathons. I recommend using <strong><a href="http://www.meetup.com">MEETUP</a></strong> to help you with this.</p>

<h2>Closing Thoughts</h2>

<p>Contrary to what many say, job hunting is a full time job in of itself. It takes a lot of time, energy, dedication, &amp; determination. Hopefully, these resources will help on your conquest.</p>

<blockquote><p style="text-align:center;">Good luck and all the best in your job search!</p></blockquote>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linked Lists and Ruby]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby/"/>
    <updated>2013-08-08T15:24:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/08/08/linked-lists-and-ruby</id>
    <content type="html"><![CDATA[<p>One of the most talked about data structures in Computer Science is the <strong>Linked List</strong>.</p>

<p>So, what is a <strong>Linked List</strong> and how can we implement it in Ruby?</p>

<h2>What is a Linked List?</h2>

<p>As defined by <strong><a href="https://en.wikipedia.org/wiki/Linked_list">Wikipedia</a></strong>, a <strong>Linked List</strong> (LL) is:</p>

<blockquote><p>Data structure consisting of a group of nodes which together represent a sequence.</p></blockquote>

<p>In the simplest implementation of a LinkedList, each node has the following:</p>

<blockquote><p><strong>value</strong> = represents the value of the node (e.g. integer, Class, etc.)</p>

<p><strong>next</strong> = pointer to the next value in the sequence.</p></blockquote>

<p>In most implementations, you also have a head and a tail pointer:</p>

<blockquote><p><strong>head</strong> = points to the first Node in the linked list.</p>

<p><strong>tail</strong> = points to the last Node in the linked list.</p></blockquote>

<p>For the visual learners, here&rsquo;s a picture that shows the structure:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_layout.png" width="500" height="500"></p>

<p>Awesome &ndash; so, how can we build this in Ruby?</p>

<h2>Ruby Implementation of a Linked List</h2>

<p>Two classes are needed in order to build a Linked List: <code>Node</code> and <code>LinkedList</code></p>

<h3>Node Class</h3>

<p>Here is my implementation of the <code>Node</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Define a Node class that holds the following:</span>
</span><span class='line'><span class="c1">#    =&gt; next  : stores the next Node in the Linked List. </span>
</span><span class='line'><span class="c1">#    =&gt; value: stores the value of the current list element.</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:value</span><span class="p">,</span> <span class="ss">:next</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>LinkedList Class</h3>

<p>Here is my implementation of the <code>LinkedList</code> class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Define a LinkedList class the holds the following:</span>
</span><span class='line'><span class="c1">#    =&gt; head  : pointer to the head of the Linked List. </span>
</span><span class='line'><span class="c1">#    =&gt; tail  : pointer to the tail of the Linked List. </span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LinkedList</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:head</span><span class="p">,</span> <span class="ss">:tail</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Initialize head and tail to same initial Node.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">head</span><span class="p">)</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;LinkedList must be initialized with a Node.&quot;</span> <span class="k">unless</span> <span class="n">head</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Node</span><span class="p">)</span>
</span><span class='line'>          
</span><span class='line'>      <span class="vi">@head</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>      <span class="vi">@tail</span> <span class="o">=</span> <span class="n">head</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Insert Node after the tail of the LinkedList.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">insert</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@tail</span><span class="o">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span>
</span><span class='line'>      <span class="vi">@tail</span> <span class="o">=</span> <span class="vi">@tail</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Print out all the values of the LinkedList in order.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>      <span class="n">current_node</span> <span class="o">=</span> <span class="vi">@head</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">while</span> <span class="n">current_node</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">LL Node Value = </span><span class="si">#{</span><span class="n">current_node</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>          <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Iterate through LinkedList and yield values to block.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">iterate</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>          <span class="n">current_node</span> <span class="o">=</span> <span class="vi">@head</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">while</span> <span class="n">current_node</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>              <span class="k">yield</span> <span class="n">current_node</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>              <span class="n">current_node</span> <span class="o">=</span> <span class="n">current_node</span><span class="o">.</span><span class="n">next</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="nb">print</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TestBench</h3>

<p>Here is a quick test bench I wrote to test functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Creating LinkedList of 5 Node elements with values 1-5.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">h</span>   <span class="o">=</span> <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">list</span> <span class="o">=</span> <span class="no">LinkedList</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">list</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Current values contained in LinkedList:</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">print</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Values of head and tail of LinkedList:</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">Value of LL Head = </span><span class="si">#{</span><span class="n">list</span><span class="o">.</span><span class="n">head</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">Value of LL Tail = </span><span class="si">#{</span><span class="n">list</span><span class="o">.</span><span class="n">tail</span><span class="o">.</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Iterating through LinkedList without a block prints the list.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">iterate</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Iterating through the LinkedList with a block runs the block on each element.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">list</span><span class="o">.</span><span class="n">iterate</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">LL Node Value squared = </span><span class="si">#{</span><span class="n">n</span> <span class="o">**</span> <span class="mi">2</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the output from the test bench:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-08-08-linked-lists-and-ruby/linkedlist_output.png" width="750" height="750"></p>

<p>Take a look at the methods I defined for:</p>

<ul>
<li>List insertion (using the <code>tail</code>) => O(1) operation.</li>
<li>Printing the list (in order).</li>
<li>List iteration (with block capability).</li>
</ul>


<p>The source code for my example is contained <a href="http://carlosplusplus.github.io/code/2013-08-08-linked-lists-and-ruby/linked_list.rb">HERE</a>.</p>

<h2>More with Linked Lists</h2>

<p>The fun doesn&rsquo;t end here!</p>

<p>Check out these other types of Linked Lists:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-08-08-linked-lists-and-ruby/Doubly-linked-list.png" width="750" height="750"></p>

<p style="text-align:center;"> <strong>Doubly Linked Lists</strong></p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-08-08-linked-lists-and-ruby/Circularly-linked-list.png" width="425" height="425"></p>

<p style="text-align:center;"> <strong>Circular Linked Lists</strong></p>

<p>Would you ever use a Linked List in practice, you ask?</p>

<p>It depends on your domain model. If you get the chance, look up a <a href="http://en.wikipedia.org/wiki/Sparse_matrix">sparse matrix</a>. This problem would be perfect for a linked list.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Japanese Language]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/08/01/ruby-and-the-japanese-language/"/>
    <updated>2013-08-01T08:00:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/08/01/ruby-and-the-japanese-language</id>
    <content type="html"><![CDATA[<p>The inspiration for this blog post comes from a few places:</p>

<ol>
<li>My love of languages and world-wide celebration of culture.</li>
<li>This <a href="http://www.slideshare.net/inouemak/ruby-and-japanesepdf">slide deck</a> by <a href="https://twitter.com/makoto_inoue">Makoto Inoue</a> on <strong>Ruby and Japanese</strong>.</li>
<li>General curiosity on the topic.</li>
</ol>


<h2><strong>こんにちは世界</strong> (Kon&#8217;nichiwa sekai!)</h2>

<p>Growing up, my first <strong>spoken</strong> language was Spanish, followed shortly there after by English and French, all three of which I&rsquo;m fluent in. In the present, I split my time between learning 5 other languages &ndash; Japanese, Mandarin Chinese, German, Italian, and Russian.</p>

<p>Interestingly enough, during this same time period, I&rsquo;ve also worked with a variety of different <strong>programming</strong> languages &ndash; C, C++, C#, Java, Python, Scheme, and MATLAB. I continue to learn languages, like Ruby, JavaScript, and HTML/CSS.</p>

<p>That begs me to ask the question:</p>

<blockquote><p style="text-align:center;"> <strong>Is there a link between programming languages and spoken languages?</strong></p></blockquote>

<p>Why yes, yes there is &ndash; let&rsquo;s take a look at <strong>Ruby and the Japanese Language</strong>.</p>

<h2>Insight into the Japanese Language</h2>

<p>Japanese has a total of three (3) different alphabets, all of which serve their own purpose:</p>

<ol>
<li><strong>Hiragana</strong> &ndash; syllabic alphabet for domestic use.</li>
<li><strong>Katakana</strong> &ndash; syllabic alphabet used for &ldquo;borrowed&rdquo; / new words.</li>
<li><strong>Kanji</strong>      &ndash; symbolic alphabet used to import Chinese words.</li>
</ol>


<p>Most students learn the syllabic alphabets first through memorization and mnemonics, using charts like this one to assist in the memorization:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-28-ruby-and-the-japanese-language/alphabet_chart.png" width="750" height="750"></p>

<p>Thousands of Kanji characters are in existence today &ndash; an individual in Japanese is considered fluent when they have mastery of the base 2000 characters. These are generally learned through memorization and constant practice.</p>

<p>Cool &ndash; so how does the Japanese language relate to the Ruby programming language?</p>

<h2>Japanese &lt;=> Ruby &ndash; What&rsquo;s the Deal?</h2>

<p>Based on the definitions of the alphabets, we can see the following comparisons between the Japanese spoken language and the Ruby programming language:</p>

<ol>
<li><strong>Hiragana</strong> &ndash; syllabic alphabet for domestic use.

<blockquote><p>In Ruby: built for <strong>domestic</strong> ease-of-use (focus on programmer happiness).</p></blockquote></li>
<li><strong>Katakana</strong> &ndash; syllabic alphabet used for &ldquo;borrowed&rdquo; / new words.

<blockquote><p>In Ruby: continually evolving and adapting <strong>new</strong> functionality.</p></blockquote></li>
<li><strong>Kanji</strong>      &ndash; symbolic alphabet used to import Chinese words.

<blockquote><p>In Ruby: merge (<strong>import</strong>) concepts of Object Orientated / Functional programming.</p></blockquote></li>
</ol>


<p>Furthermore, parts of the Japanese language can be seen as both object oriented (OO) and functional in nature.</p>

<h3>Object Oriented Comparison</h3>

<p>Thinking back to when we were learning English, our teachers taught us that sentences are formed in the following order: Subject &ndash; Verb &ndash; <strong>Object</strong> (SVO). It&rsquo;s fair to state that English is an &ldquo;Object-Oriented Language,&rdquo; where context revolves around the object in question.</p>

<p>Japanese is quite similar, with the &ldquo;normal&rdquo; form of expressions being in the following form: Subject &ndash; <strong>Object</strong> &ndash; Verb (SOV). For example, take the following sentence:</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><code>English</code></th>
<th align="center"><code>Japanese</code></th>
<th align="center"><code>Pronunciation</code></th>
<th align="center"><code>Structure</code></th>
<th align="center"><code>Literal English</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">私はベーコンを食べます。</td>
<td align="center">Watashi ha bacon wo tabemasu.</td>
<td align="center">SOV</td>
<td align="center">&ldquo;I bacon eat.&rdquo;</td>
</tr>
</tbody>
</table>


<p>Ruby&rsquo;s primary focus, much like the Japanese language, targets the object as the center of attention. Although the grammatical structure may be different, the intention remains the absolute same.</p>

<p>In terms of code, Ruby also allows us to define functionality in both object oriented and procedural ways:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Object Oriented</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Procedural</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;file&quot;</span><span class="p">,</span><span class="s2">&quot;foo.txt)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
The example above shows the flexibility of Ruby to implement the same solution using two different grammatical orders. In most cases, when dealing with a complex problem, functionality is encapsulated within a class. Object Orientation proves to be a great aspect of the Ruby language.</p>

<h3>Functional Comparison</h3>

<p>Japanese grammar is different in that it is <em>post-positional</em>:</p>

<blockquote><p>postposition &ndash; a word placed after the word it governs (e.g. the &lsquo;ward&rsquo; in homeward).</p></blockquote>

<p>These <em>post-positional</em> words are used to decide the role of the noun which it supports. This would allow a Japanese speaker to change the order of the grammar pretty easily, <em>chaining as many sentences as desired</em>, and even <em>omitting the subject</em> altogether.</p>

<p>Here are some examples:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-28-ruby-and-the-japanese-language/functional_japanese.png" width="500" height="500"></p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><code>English</code></th>
<th align="center"><code>Japanese</code></th>
<th align="center"><code>Pronunciation</code></th>
<th align="center"><code>Structure</code></th>
<th align="center"><code>Literal English</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">私はベーコンを食べます。</td>
<td align="center">Watashi ha bacon wo tabemasu.</td>
<td align="center">SOV</td>
<td align="center">&ldquo;I bacon eat.&rdquo;</td>
</tr>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">ベーコンを私は食べます。</td>
<td align="center">Bacon wo watashi ha tabemasu.</td>
<td align="center">OSV</td>
<td align="center">&ldquo;Bacon I eat.&rdquo;</td>
</tr>
<tr>
<td></td>
<td align="center">I eat bacon.</td>
<td align="center">ベーコンを食べます。</td>
<td align="center">Bacon wo tabemasu.</td>
<td align="center">OV</td>
<td align="center">&ldquo;Bacon eat.&rdquo;</td>
</tr>
</tbody>
</table>


<p>Where do we see this sort of behavior in Ruby?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##########################</span>
</span><span class='line'><span class="c1"># Expressively Iterative #</span>
</span><span class='line'><span class="c1">##########################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># .times enumerator  =&gt; 5x</span>
</span><span class='line'><span class="mi">5</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># =&gt; Perform action here.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># while loop =&gt; 5x</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">c</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># Perform action here.</span>
</span><span class='line'>  <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># for loop =&gt; 5x</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span>
</span><span class='line'>  <span class="c1"># Perform action here.</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">##########################</span>
</span><span class='line'><span class="c1"># Functional Flexibility #</span>
</span><span class='line'><span class="c1">##########################</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span>  <span class="o">=</span> <span class="s2">&quot;Hello World!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">expr1</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;O&#39;</span><span class="p">,</span><span class="s1">&#39;X&#39;</span><span class="p">)</span>    
</span><span class='line'>  <span class="c1"># =&gt; &quot;HELLX WXRLD!&quot;</span>
</span><span class='line'><span class="n">expr2</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;O&#39;</span><span class="p">,</span><span class="s1">&#39;X&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; &quot;HELL WRLD!&quot;</span>
</span><span class='line'><span class="n">expr3</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;O&#39;</span><span class="p">,</span><span class="s1">&#39;X&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="s1">&#39;o&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># =&gt; &quot;HELLO WORLD!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#########################</span>
</span><span class='line'><span class="c1"># Contextual Evaluation #</span>
</span><span class='line'><span class="c1">#########################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Opens a file.</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;foo.txt&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Open a file and then yield to a block.</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;foo.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">######################</span>
</span><span class='line'><span class="c1"># Implicative Nature #</span>
</span><span class='line'><span class="c1">######################</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Explicit self used in instance method.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">bark</span><span class="p">(</span><span class="vi">@name</span><span class="p">)</span>    <span class="c1"># =&gt; SVO</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bark</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;&#39;WOOF!&#39; barks </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Implicit call to instance method without self.</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>      <span class="n">bark</span><span class="p">(</span><span class="vi">@name</span><span class="p">)</span>        <span class="c1"># =&gt; VO</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bark</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;&#39;WOOF!&#39; barks </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Functional programming in Ruby allows for hard-core abstraction and meta-programming, which is something that other programming languages do not support as easily.</p>

<h2>Ruby in Japanese</h2>

<p>One example of a gem that allows you to evaluate Japanese characters and expressions in the Ruby programming language is the <a href="https://github.com/makoto/japanize">japanize</a> gem.</p>

<p>Here&rsquo;s output to what a command line might look like, along with a test that was written in order to test the interpreter:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-28-ruby-and-the-japanese-language/japanize_output.png" width="500" height="500"></p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-28-ruby-and-the-japanese-language/japanize_test.png" width="500" height="500"></p>

<p>Note that this gem is outdated (3 years old), and that other gems exist that establish the morphemes (translation patterns) between English and Japanese for Ruby.</p>

<h2>Embracing Language Diversity in the World</h2>

<p>Too often, I overhear people argue over which language is:</p>

<ul>
<li>Better.</li>
<li>Faster.</li>
<li>Stronger.</li>
<li>More Robust.</li>
<li>More Semantically Correct.</li>
</ul>


<p>As programmers and as citizens of a diverse world, it&rsquo;s up to us to <strong>respect</strong> language in general, whether programming or spoken. It should come as no surprise that programming and spoken languages are so similar, <em>as one is used to express</em> the other.</p>

<blockquote><p style="text-align:center;"> <strong>どうもありがとうございました。</strong> (Dōmo arigatōgozaimashita!)</p></blockquote>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Becoming a Ruby Warrior with Artificial Intelligence]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/07/14/becoming-a-ruby-warrior-with-artificial-intelligence/"/>
    <updated>2013-07-14T15:33:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/07/14/becoming-a-ruby-warrior-with-artificial-intelligence</id>
    <content type="html"><![CDATA[<p>In Weeks 3 &ndash; 6 at Flatiron School, the focus has been on learning both the Sinatra and Rails web frameworks. Understanding the paradigms has been crucial in spinning up web applications &ldquo;the right way&rdquo;.</p>

<p>However, it&rsquo;s important to remember the foundation on which these frameworks are built &ndash; the <strong>Ruby</strong> language. With only 6 weeks of Ruby knowledge under my belt, I want to continue understanding the principles of abstraction, modeling, and scope.</p>

<p>Enter the realm of <strong>Artificial Intelligence (AI)</strong>.</p>

<h2>Basic AI Principles</h2>

<p>I&rsquo;ve had the honor and pleasure of working with AI concepts in the Scheme programming language. I wanted to explore this realm in Ruby, and it turns out there&rsquo;s a great venue. Before I get into that, let me define two common terms used in AI:</p>

<p><strong>Agent</strong>: an autonomous entity which observes through sensors and acts upon an environment using actuators and directs its activity towards achieving goals.</p>

<p><strong>Heuristic</strong>: a function that ranks alternatives in various search algorithms at each branching step based on the available information in order to make a decision about which branch to follow during a search.</p>

<p>Here&rsquo;s a cool image that will make these definitions clearer:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/AI_Agent.png" width="575" height="575"></p>

<p>Now with that background, onto <strong>Ruby Warrior</strong>.</p>

<h2>What is Ruby Warrior?</h2>

<p>The <strong>Ruby Warrior</strong> project (<strong><a href="https://github.com/ryanb/ruby-warrior">Github</a></strong> and <strong><a href="http://rubygems.org/gems/rubywarrior">Ruby Gem</a></strong>) was built as a vehicle to teach Ruby. How? Through the gamification of artificial intelligence.</p>

<p>Here&rsquo;s a quick overview:</p>

<ul>
<li>You (the player) are a Warrior in this world, with your primary objective being to scale levels of a tower.

<ul>
<li>There is a beginner / intermediate tower, both with &lsquo;epic&rsquo; modes.</li>
</ul>
</li>
<li>Each level is laid out differently, and can have a variety of components.

<ul>
<li>Monsters, Captives, Bombs, Walls, etc.</li>
</ul>
</li>
<li>Each level grants the warrior more abilities.

<ul>
<li>  You get to perform one and only one action(!) per turn based on whatever logic you choose to define.</li>
<li>More abilities lead to harder levels (e.g. more directions to move in).</li>
</ul>
</li>
<li>A score is given per level based on different things: level clear speed, amount of action! used, captives rescued, etc.</li>
</ul>


<p>Every turn, the <code>play_turn</code> method is called in <code>player.rb</code> file &ndash; this and any other files can be used, as long as <code>play_turn</code> calls one and only one action.</p>

<h2>Climbing the Tower</h2>

<p>For this post, my goal is to share how I&rsquo;ve applied my Ruby skills to the first 4 levels. Here&rsquo;s a quick legend regarding level layouts:</p>

<p style="text-align:center;"> <strong>Legend: Tower Level Symbols</strong></p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><code>Name</code></th>
<th align="center"><code>Symbol</code></th>
<th align="center"><code>HP</code></th>
<th align="center"><code>Atk</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">Warrior</td>
<td align="center">@</td>
<td align="center">20</td>
<td align="center">5</td>
</tr>
<tr>
<td></td>
<td align="center">Sludge</td>
<td align="center">s</td>
<td align="center">12</td>
<td align="center">3</td>
</tr>
<tr>
<td></td>
<td align="center">Thick Sludge</td>
<td align="center">S</td>
<td align="center">24</td>
<td align="center">3</td>
</tr>
<tr>
<td></td>
<td align="center">Archer</td>
<td align="center">a</td>
<td align="center">7</td>
<td align="center">3</td>
</tr>
<tr>
<td></td>
<td align="center">Stairs</td>
<td align="center">></td>
<td align="center">&ndash;</td>
<td align="center">&ndash;</td>
</tr>
</tbody>
</table>


<h3>Level 01</h3>

<p>Here is the representation of Level 01:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/Level01.png" width="175" height="175"></p>

<p>This level is pretty straightforward. Having only one action available [<code>warrior.walk!</code>], the logic here is simple:</p>

<figure class='code'><figcaption><span>Ruby Warrior: Level 01 (player_h01.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/player_h01.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Level 01 was completed and I achieved maximum points.</p>

<h4>Lessons learned:</h4>

<ul>
<li>Model heuristic functionality based on immediate sufficiency.</li>
</ul>


<h3>Level 02</h3>

<p>Here is the representation of Level 02:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/Level02.png" width="175" height="175"></p>

<p>This level introduced the first monster. I realized I needed to add logic to check to see if a monster was in front of me based on my available actions. Still pretty straightforward.</p>

<figure class='code'><figcaption><span>Ruby Warrior: Level 02 (player_h02.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/player_h02.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">rest!</span> <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span> <span class="mi">15</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">empty?</span> <span class="o">==</span> <span class="kp">true</span> <span class="p">?</span> <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span> <span class="p">:</span> <span class="n">warrior</span><span class="o">.</span><span class="n">attack!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Level 02 was completed now completed.</p>

<h4>Lessons learned:</h4>

<ul>
<li>Decision logic is going to get completed quick.

<ul>
<li>Probably worth refactoring and &ldquo;setting the stage&rdquo; in Level 03.</li>
</ul>
</li>
<li>Able to make assumption that <code>Player</code> class is being initialized one time, with <code>play_turn</code> being called in a loop. Take advantage of the <code>initialize</code> method.</li>
</ul>


<h3>Level 03</h3>

<p>Here is the representation of Level 03:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/Level03.png" width="175" height="175"></p>

<p>Four (4) monsters. <strong>Oh snap son</strong>.</p>

<p>As I began writing my code, I realized I didn&rsquo;t want to do annoying amounts of nested logic. Projecting into the future, I felt the need to begin splitting parts of the agent into logical methods in an organized structure. I also needed to figure out when was the right time to rest, to keep moving forward, and when to attack.</p>

<figure class='code'><figcaption><span>Ruby Warrior: Level 03 (player_h03.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/player_h03.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#########################</span>
</span><span class='line'>  <span class="c1"># Player Initialization #</span>
</span><span class='line'>  <span class="c1">#########################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">false</span>        <span class="c1"># Did I take my action?</span>
</span><span class='line'>      <span class="vi">@in_combat</span>      <span class="o">=</span> <span class="kp">false</span>      <span class="c1"># Am I in combat?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>  <span class="c1"># Helper Methods #</span>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">sense_environment</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@action_taken</span>   <span class="o">=</span> <span class="kp">false</span>      <span class="c1"># Reset environment.</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># No longer in combat.</span>
</span><span class='line'>      <span class="vi">@in_combat</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="p">(</span><span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">empty?</span> <span class="o">==</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_health</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="vi">@in_combat</span> <span class="o">==</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">rest!</span>
</span><span class='line'>          <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attack_monster</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">empty?</span> <span class="o">==</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">attack!</span>
</span><span class='line'>
</span><span class='line'>          <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>          <span class="vi">@in_combat</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="vi">@in_combat</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_warrior</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span> <span class="k">if</span> <span class="vi">@action_taken</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>      <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">####################</span>
</span><span class='line'>  <span class="c1"># Play Turn Method #</span>
</span><span class='line'>  <span class="c1">####################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Sense environment for clues.</span>
</span><span class='line'>      <span class="n">sense_environment</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Check health of the warrior.</span>
</span><span class='line'>      <span class="n">check_health</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Attack monster if present.</span>
</span><span class='line'>      <span class="n">attack_monster</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Move warrior in a specific direction.</span>
</span><span class='line'>      <span class="n">move_warrior</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Overall, I was really happy with my code &ndash; beat this level with no issues. Even though it grew in size, the <code>play_turn</code> method is readable and tells me exactly what the Warrior is to do at any given point in time.</p>

<h4>Lessons learned:</h4>

<ul>
<li>(+) Breaking out logic into well-named functions was a great idea!</li>
<li>(&ndash;) Potential issues in the future with additional functionality (like more actions).</li>
<li>(&ndash;) Don&rsquo;t like how each function needs to have <code>warrior</code> as a parameter.

<ul>
<li>Can this be fixed with instance variables in Level 04?</li>
</ul>
</li>
<li>(&ndash;) ALL actions are evaluated even if an action is already called.</li>
</ul>


<p>Given all the negatives, there was going to be some heavy-duty refactoring in Level 04. All in all though, I was fairly certain that the logic in the code was &lsquo;just going to work&rsquo;.</p>

<p>I couldn&rsquo;t have been more wrong.</p>

<h3>Level 04</h3>

<p>Here is the representation of Level 04:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/Level04.png" width="175" height="175"></p>

<p>Enter the dreaded <strong>Archer</strong> &ndash; umm&hellip; f*ck.</p>

<p>This unit can attack from multiple spaces away. With my current logic, I&rsquo;d rest when the space in front of me was empty and I wasn&rsquo;t in combat. <strong>BUT I WAS IN COMBAT</strong>, since my health was decreasing by 1HP even though I was resting (rest = +2HP, attack = -3HP).</p>

<p>This now forced new state logic into my methods, along with some well-needed refactoring.</p>

<figure class='code'><figcaption><span>Ruby Warrior: Level 04 (player_h04.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/player_h04.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#########################</span>
</span><span class='line'>  <span class="c1"># Player Initialization #</span>
</span><span class='line'>  <span class="c1">#########################</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Initialize instance variables.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="vi">@prv_health</span>         <span class="o">=</span> <span class="mi">20</span>         <span class="c1"># What was my previous health?</span>
</span><span class='line'>      <span class="vi">@cur_health</span>         <span class="o">=</span>    <span class="mi">20</span>          <span class="c1"># What is my current health?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># List of possible warrior actions.</span>
</span><span class='line'>  <span class="no">Actions</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:check_health</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:attack_monster</span><span class="p">,</span>
</span><span class='line'>                       <span class="ss">:move_warrior</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">###########################</span>
</span><span class='line'>  <span class="c1"># Pre and Post Processing #</span>
</span><span class='line'>  <span class="c1">###########################</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Understand environment prior to taking action.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pre_sense</span>
</span><span class='line'>      <span class="c1"># Reset warrior action from previous turn.</span>
</span><span class='line'>      <span class="vi">@action_taken</span>       <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Determine health and surroundings.</span>
</span><span class='line'>      <span class="vi">@space_empty</span>        <span class="o">=</span> <span class="vi">@warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>      <span class="vi">@cur_health</span>         <span class="o">=</span> <span class="vi">@warrior</span><span class="o">.</span><span class="n">health</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Determine combat state.</span>
</span><span class='line'>      <span class="vi">@in_combat</span>          <span class="o">=</span> <span class="n">in_combat?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Perform state analysis for net turn.</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_sense</span>
</span><span class='line'>      <span class="vi">@prv_health</span>         <span class="o">=</span> <span class="vi">@warrior</span><span class="o">.</span><span class="n">health</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>  <span class="c1"># Action Methods #</span>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check_health</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="vi">@cur_health</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="vi">@in_combat</span> <span class="o">==</span> <span class="ss">:no</span><span class="p">)</span>
</span><span class='line'>          <span class="vi">@warrior</span><span class="o">.</span><span class="n">rest!</span>
</span><span class='line'>          <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">attack_monster</span>
</span><span class='line'>      <span class="k">case</span> <span class="vi">@in_combat</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:near</span>                           <span class="c1"># Enemy is adjacent.</span>
</span><span class='line'>          <span class="vi">@warrior</span><span class="o">.</span><span class="n">attack!</span>
</span><span class='line'>          <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">when</span> <span class="ss">:far</span>                                <span class="c1"># Walk to enemy.</span>
</span><span class='line'>          <span class="vi">@warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>          <span class="vi">@action_taken</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">move_warrior</span>
</span><span class='line'>      <span class="vi">@warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>  <span class="c1"># Helper Methods #</span>
</span><span class='line'>  <span class="c1">##################</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Did I lose health from last turn to this one?</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lost_health?</span>
</span><span class='line'>      <span class="p">(</span><span class="vi">@cur_health</span> <span class="o">-</span> <span class="vi">@prv_health</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Am I in combat? If so, what &quot;kind&quot; of combat?</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">in_combat?</span>
</span><span class='line'>      <span class="n">combat_state</span> <span class="o">=</span> <span class="ss">:no</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">combat_state</span> <span class="o">=</span> <span class="ss">:near</span> <span class="k">if</span> <span class="p">(</span><span class="vi">@space_empty</span> <span class="o">==</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>      <span class="n">combat_state</span> <span class="o">=</span> <span class="ss">:far</span>    <span class="k">if</span> <span class="p">(</span><span class="vi">@space_empty</span> <span class="o">==</span> <span class="kp">true</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">lost_health?</span> <span class="o">==</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">combat_state</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#####################</span>
</span><span class='line'>  <span class="c1"># Logic for Actions #</span>
</span><span class='line'>  <span class="c1">#####################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">perform_action</span>
</span><span class='line'>      <span class="no">Actions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="o">|</span>
</span><span class='line'>          <span class="nb">send</span> <span class="n">action</span>
</span><span class='line'>          <span class="k">break</span> <span class="k">if</span> <span class="vi">@action_taken</span> <span class="o">==</span> <span class="kp">true</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">####################</span>
</span><span class='line'>  <span class="c1"># Play Turn Method #</span>
</span><span class='line'>  <span class="c1">####################</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">take_turn</span>
</span><span class='line'>      <span class="n">pre_sense</span>                <span class="c1"># Gather information on environment.</span>
</span><span class='line'>      <span class="n">perform_action</span>   <span class="c1"># Perform action based on known items.</span>
</span><span class='line'>      <span class="n">post_sense</span>           <span class="c1"># Store state of warrior for next turn.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># Allow warrior to be accessed in all sections.</span>
</span><span class='line'>      <span class="vi">@warrior</span> <span class="o">=</span> <span class="n">warrior</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Take turn for the warrior.</span>
</span><span class='line'>      <span class="n">take_turn</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome! This now gets around the &lsquo;distance attack&rsquo; issue. If I&rsquo;m being attacked from afar and the space in front of me is empty, <strong>do not rest</strong> and continue walking until you find and slay the offending monster.</p>

<h4>Lessons learned:</h4>

<ul>
<li>(+) Building modular code makes it easy to add in edge cases.</li>
<li>(+) Constant refactoring makes for better flow.</li>
<li>(&ndash;) <code>class Player</code> is getting huge.

<ul>
<li>Consider splitting things into separate classes?</li>
</ul>
</li>
</ul>


<p>Interestingly enough, your Agent can always be &ldquo;more intelligent&rdquo;.</p>

<h2>Shooting for the Top</h2>

<p>I have a long way to go to reach the top of the <strong>Beginner</strong> tower, but this has been a tremendous learning experience. I&rsquo;ve been able to apply Ruby principles to the challenging yet fun problem space of Artificial Intelligence.</p>

<p>A few things I&rsquo;m thinking about going forward:</p>

<h4>Future considerations:</h4>

<ul>
<li>Classes and further simplification makes sense.</li>
<li>The levels are only going to get harder:

<ul>
<li>Ability to move in different directions.</li>
<li>2-dimensional maps.

<ul>
<li>How will I track movement?</li>
<li>How will I behave when I hit a wall?</li>
</ul>
</li>
<li>Rescuing captives.</li>
<li>Shooting ranged weapons.</li>
<li>Commanding a &lsquo;golem&rsquo; during my turn.</li>
<li>Avoiding bombs that detonate.</li>
</ul>
</li>
</ul>


<p>I&rsquo;m convinced that my upfront work will help prevent the following from happening:</p>

<figure class='code'><figcaption><span>Ruby Warrior: Level 09 (HORRIBAD CODE) (level09_example.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/level09_example.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">Player</span>
</span><span class='line'>  <span class="vi">@last_known_health</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="no">RUNAWAY</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">50</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="no">BANZAI</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">80</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">VISIBLE_THINGS</span><span class="o">=[</span> <span class="ss">:stairs</span><span class="p">,</span> <span class="ss">:empty</span><span class="p">,</span> <span class="ss">:wall</span><span class="p">,</span> <span class="ss">:captive</span><span class="p">,</span> <span class="ss">:enemy</span> <span class="o">]</span>
</span><span class='line'>  <span class="no">MAX_RANGED_ATTACK_DISTANCE</span><span class="o">=</span><span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@last_shot</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="vi">@last_known_health</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">scan</span><span class="p">(</span><span class="n">spaces</span><span class="p">)</span>
</span><span class='line'>    <span class="n">line_of_sight</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">spaces</span><span class="o">.</span><span class="n">each_with_index</span> <span class="p">{</span> <span class="o">|</span><span class="n">space</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>      <span class="n">distance</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="n">succ</span>
</span><span class='line'>      <span class="n">entity</span> <span class="o">=</span> <span class="no">VISIBLE_THINGS</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">type</span><span class="o">|</span>
</span><span class='line'>        <span class="n">space</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">type</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">?&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="k">raise</span> <span class="s2">&quot;woah&quot;</span> <span class="k">unless</span> <span class="n">entity</span>
</span><span class='line'>      <span class="n">line_of_sight</span><span class="o">[</span><span class="ss">:nearest</span><span class="o">]</span> <span class="o">=</span> <span class="n">entity</span> <span class="k">unless</span> <span class="n">line_of_sight</span><span class="o">[</span><span class="ss">:nearest</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">line_of_sight</span><span class="o">[</span><span class="n">entity</span><span class="o">]</span>
</span><span class='line'>        <span class="n">line_of_sight</span><span class="o">[</span><span class="n">entity</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">distance</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">line_of_sight</span><span class="o">[</span><span class="n">entity</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">distance</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">nearest_entity_key</span> <span class="o">=</span> <span class="s2">&quot;nearest_</span><span class="si">#{</span><span class="n">entity</span><span class="o">.</span><span class="n">to_s</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>      <span class="n">line_of_sight</span><span class="o">[</span><span class="n">nearest_entity_key</span><span class="o">]</span> <span class="o">=</span> <span class="n">distance</span> <span class="k">unless</span> <span class="n">line_of_sight</span><span class="o">[</span><span class="n">nearest_entity_key</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># zero based distance could be easy to forget...</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">line_of_sight</span><span class="o">[</span><span class="ss">:view</span><span class="o">]</span>
</span><span class='line'>        <span class="n">line_of_sight</span><span class="o">[</span><span class="ss">:view</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">entity</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">line_of_sight</span><span class="o">[</span><span class="ss">:view</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">entity</span><span class="o">]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">line_of_sight</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">play_turn</span><span class="p">(</span><span class="n">warrior</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@last_known_health</span> <span class="o">=</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="k">unless</span> <span class="vi">@last_known_health</span>
</span><span class='line'>    <span class="n">took_damage</span> <span class="o">=</span> <span class="vi">@last_known_health</span> <span class="o">&gt;</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span>
</span><span class='line'>    <span class="n">shot</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">wall?</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">pivot!</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">enemy?</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">attack!</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">warrior</span><span class="o">.</span><span class="n">feel</span><span class="o">.</span><span class="n">captive?</span>
</span><span class='line'>      <span class="n">warrior</span><span class="o">.</span><span class="n">rescue!</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">i_spy</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:backward</span><span class="p">,</span> <span class="ss">:forward</span><span class="o">].</span><span class="n">reduce</span><span class="p">({})</span> <span class="p">{</span> <span class="o">|</span><span class="n">area</span><span class="p">,</span> <span class="n">direction</span><span class="o">|</span>
</span><span class='line'>        <span class="n">area</span><span class="o">[</span><span class="n">direction</span><span class="o">]</span> <span class="o">=</span> <span class="nb">scan</span> <span class="n">warrior</span><span class="o">.</span><span class="n">look</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span>
</span><span class='line'>        <span class="n">area</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">stairs_ahead</span><span class="p">,</span> <span class="n">stairs_behind</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:forward</span><span class="p">,</span> <span class="ss">:backward</span><span class="o">].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>        <span class="k">next</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">i_spy</span><span class="o">[</span><span class="n">dir</span><span class="o">][</span><span class="ss">:stairs</span><span class="o">]</span>
</span><span class='line'>        <span class="n">i_spy</span><span class="o">[</span><span class="n">dir</span><span class="o">][</span><span class="ss">:view</span><span class="o">].</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="o">[</span><span class="ss">:empty</span><span class="p">,</span> <span class="ss">:stairs</span><span class="p">,</span> <span class="ss">:wall</span><span class="o">].</span><span class="n">include?</span> <span class="n">item</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">sneaky_captive</span> <span class="o">=</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:backward</span><span class="o">][</span><span class="ss">:captive</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:backward</span><span class="o">][</span><span class="ss">:view</span><span class="o">].</span><span class="n">all?</span> <span class="p">{</span><span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="o">[</span><span class="ss">:empty</span><span class="p">,</span> <span class="ss">:stairs</span><span class="p">,</span> <span class="ss">:wall</span><span class="p">,</span> <span class="ss">:captive</span><span class="o">].</span><span class="n">include?</span> <span class="n">item</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">nearest_wall</span> <span class="o">=</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:backward</span><span class="o">].</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:nearest_wall</span><span class="p">,</span> <span class="no">MAX_RANGED_ATTACK_DISTANCE</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">nearest_enemy</span> <span class="o">=</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:forward</span><span class="o">][</span><span class="ss">:nearest_enemy</span><span class="o">]</span>
</span><span class='line'>      <span class="n">nearest_captive</span> <span class="o">=</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:forward</span><span class="o">][</span><span class="ss">:nearest_captive</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">nowhere_to_run</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">nearest_wall</span> <span class="o">&amp;&amp;</span> <span class="n">nearest_enemy</span> <span class="o">&amp;&amp;</span> <span class="n">took_damage</span>
</span><span class='line'>        <span class="n">nowhere_to_run</span> <span class="o">=</span> <span class="p">(</span><span class="n">nearest_enemy</span> <span class="o">+</span> <span class="p">(</span><span class="n">nearest_wall</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="no">MAX_RANGED_ATTACK_DISTANCE</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">#pp i_spy</span>
</span><span class='line'>      <span class="c1">#puts stairs_ahead, stairs_behind, sneaky_captive, nearest_captive, nearest_wall, nearest_enemy, nowhere_to_run</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">stairs_ahead</span>
</span><span class='line'>        <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span> <span class="ss">:forward</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">stairs_behind</span> <span class="o">||</span> <span class="n">sneaky_captive</span>
</span><span class='line'>        <span class="n">warrior</span><span class="o">.</span><span class="n">pivot!</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">took_damage</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&gt;</span> <span class="no">RUNAWAY</span> <span class="o">||</span> <span class="n">nowhere_to_run</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span> <span class="ss">:forward</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span> <span class="ss">:backward</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span> <span class="o">&lt;</span> <span class="no">BANZAI</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">nearest_enemy</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">shoot!</span>
</span><span class='line'>          <span class="n">shot</span> <span class="o">=</span> <span class="n">nearest_enemy</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">rest!</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">surrounded</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:backward</span><span class="p">,</span> <span class="ss">:forward</span><span class="o">].</span><span class="n">all?</span> <span class="p">{</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span> <span class="n">i_spy</span><span class="o">[</span><span class="n">dir</span><span class="o">][</span><span class="ss">:enemy</span><span class="o">]</span> <span class="p">}</span> <span class="c1"># it&#39;s a trap!!</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">surrounded</span> <span class="o">&amp;&amp;</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:backward</span><span class="o">][</span><span class="ss">:nearest_enemy</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">i_spy</span><span class="o">[</span><span class="ss">:forward</span><span class="o">][</span><span class="ss">:nearest_enemy</span><span class="o">]</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">pivot!</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@last_shot</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">nearest_enemy</span> <span class="o">==</span> <span class="vi">@last_shot</span> <span class="c1"># @#!$#@ didn&#39;t die, charge!!</span>
</span><span class='line'>            <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>          <span class="k">elsif</span> <span class="n">nearest_enemy</span>
</span><span class='line'>            <span class="n">shot</span> <span class="o">=</span> <span class="n">nearest_enemy</span>
</span><span class='line'>            <span class="n">warrior</span><span class="o">.</span><span class="n">shoot!</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="n">nearest_enemy</span> <span class="o">||</span> <span class="n">nearest_captive</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">nearest_enemy</span> <span class="o">==</span> <span class="o">[</span><span class="n">nearest_enemy</span><span class="p">,</span> <span class="n">nearest_captive</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'>            <span class="n">warrior</span><span class="o">.</span><span class="n">shoot!</span>
</span><span class='line'>            <span class="n">shot</span> <span class="o">=</span> <span class="n">nearest_enemy</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>            <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">warrior</span><span class="o">.</span><span class="n">walk!</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@last_known_health</span> <span class="o">=</span> <span class="n">warrior</span><span class="o">.</span><span class="n">health</span>
</span><span class='line'>    <span class="vi">@last_shot</span> <span class="o">=</span> <span class="n">shot</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p style="text-align:center;">DON&rsquo;T DO THIS!</p></blockquote>

<p>Slowly but surely, I will become the Ruby Warrior I&rsquo;m destined to be.</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-07-14-becoming-a-ruby-warrior-with-artificial-intelligence/RubyWarrior.png" width="750" height="750"></p>

<p>A shoutout to my boy <a href="http://dfriedm.github.io/">Dan Friedman</a> for working on this with me.</p>

<p>There&rsquo;s still much learning to do and more levels to conquer. Onward and upward!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HCI - The Possibilities are Endless]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/30/hci-the-possibilities-are-endless/"/>
    <updated>2013-06-30T14:11:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/30/hci-the-possibilities-are-endless</id>
    <content type="html"><![CDATA[<p>One of the things that has most fascinated me about the world of technology is our ability (and even sometimes, inability) to interact with computers. You hear about things like <strong><a href="https://en.wikipedia.org/wiki/Artificial_intelligence" title="Definition of Artificial Intelligence">Artificial Intelligence</a></strong>, self-realizations regarding the possibilities seen in the movie <strong><a href="http://www.imdb.com/title/tt0133093/">The Matrix</a></strong>, and prophecies of when <strong><a href="http://terminator.wikia.com/wiki/Skynet">SkyNet</a></strong> will take over the world.</p>

<p>Interestingly enough, this is where <strong>HCI</strong> comes into play.</p>

<h2>What is HCI?</h2>

<p>As defined by <a href="https://en.wikipedia.org/wiki/Human%E2%80%93computer_interaction">Wikipedia</a>:</p>

<blockquote><p>Human–computer Interaction (HCI) involves the study, planning, and design of the interaction between people (users) and computers.</p></blockquote>

<p>HCI extends in to a variety of different realms, encompassing things we take for granted like website interaction all the way to virtual reality. Our day to day communication with our computers, whether physical or emotional, defines our overall user experience (UX). The user interaction (UI) is a large part of what we as web developers can control.</p>

<p>Coming from a computer engineering / hardware background, I&rsquo;ve always had a great interest exploring the combined space of gaming, hardware, and HCI. So that got me thinking&hellip; does an API exist that allows me to interface with the Microsoft Kinect?</p>

<h2>Hacking the Microsoft Kinect</h2>

<p>I&rsquo;ve owned a Microsoft Kinect since the day it was publicly released, and to this day, am continually impressed by its raw power and how its changed the space of gaming. In doing some research, it appears like there are a few Ruby wrappers in existence that allow for direct interface with the hardware. Luckily, the only requirements for the software were a computer with USB ports and lots of time.</p>

<p>At the high level, here are some quick data points I discovered while analyzing two ruby gems: <strong>Kinect-Ruby Processing</strong> and <strong>Ruby-Freenect</strong>.</p>

<pre><code>- Released as Ruby Gems with dependencies.
- Interface directly with hardware via USB.
- Allow for control of image / video type.
    &gt; Allow for image capture.
    &gt; Allow for video capture.
- Allow for control of camera tilt mechanism.
- Allow for control of LED.
- Video feed in RGB / InfraRed (IR) / Depth provided.
- Average of about 30 Frames per Second (FPS).
- Support of gem halted &gt; 1yr ago! :(
</code></pre>

<p>Now to see the contenders in a little more detail!</p>

<h3>Kinect-Ruby Processing</h3>

<p>The <strong><a href="https://github.com/mudphone/Kinect-Ruby-Processing" title="Github of Kinect-Ruby Processing gem">Kinect-Ruby Processing</a></strong> gem interfaces directly with the Ruby Processing (rp5) library. Using this raw power that many don&rsquo;t realize Ruby can handle, it interfaces directly with the hardware and can provide functionality as described in the previous section.</p>

<p>Here are images taken directly from the Kinect:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/rp5_rgb_depth.png" width="750" height="1250"></p>

<p style="text-align:center;"> <strong>Kinect-Ruby Processing: RGB with Depth Map</strong></p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/rp5_ir_depth.png" width="750" height="1250"></p>

<p style="text-align:center;"> <strong>Kinect-Ruby Processing: Infrared with Depth Map</strong></p>

<p>So&hellip; you&rsquo;re probably asking yourself, what does some of this code look like? Let&rsquo;s see:</p>

<figure class='code'><figcaption><span>Kinect-Ruby Processing: RGB Depth Test (rgb_depth_test.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-06-30-hci-the-possibilities-are-endless/rgb_depth_test.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;ruby-processing&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">RGBDepthText</span> <span class="o">&lt;</span> <span class="ss">Processing</span><span class="p">:</span><span class="ss">:App</span>
</span><span class='line'>  <span class="n">load_library</span> <span class="s2">&quot;openkinect&quot;</span>
</span><span class='line'>  <span class="n">include_package</span> <span class="s1">&#39;org.openkinect&#39;</span>
</span><span class='line'>  <span class="n">include_package</span> <span class="s1">&#39;org.openkinect.processing&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:kinect</span><span class="p">,</span> <span class="ss">:depth</span><span class="p">,</span> <span class="ss">:rgb</span><span class="p">,</span> <span class="ss">:ir</span><span class="p">,</span> <span class="ss">:deg</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:quit</span><span class="p">,</span> <span class="ss">:stop</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@deg</span> <span class="o">=</span> <span class="mi">15</span>
</span><span class='line'>    <span class="vi">@depth</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="vi">@rgb</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="vi">@ir</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size</span><span class="p">(</span><span class="mi">1280</span><span class="p">,</span><span class="mi">520</span><span class="p">);</span>
</span><span class='line'>    <span class="vi">@kinect</span> <span class="o">=</span> <span class="no">Kinect</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableDepth</span><span class="p">(</span><span class="vi">@depth</span><span class="p">);</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableRGB</span><span class="p">(</span><span class="vi">@rgb</span><span class="p">);</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableIR</span><span class="p">(</span><span class="vi">@ir</span><span class="p">);</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">tilt</span><span class="p">(</span><span class="vi">@deg</span><span class="p">);</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">draw</span><span class="p">()</span>
</span><span class='line'>    <span class="n">background</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">image</span><span class="p">(</span><span class="vi">@kinect</span><span class="o">.</span><span class="n">getVideoImage</span><span class="p">(),</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">image</span><span class="p">(</span><span class="vi">@kinect</span><span class="o">.</span><span class="n">getDepthImage</span><span class="p">(),</span><span class="mi">640</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fill</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
</span><span class='line'>    <span class="n">text</span><span class="p">(</span><span class="s2">&quot;RGB/IR FPS: </span><span class="si">#{</span><span class="vi">@kinect</span><span class="o">.</span><span class="n">getVideoFPS</span><span class="p">()</span><span class="si">}</span><span class="s2">        Camera tilt: </span><span class="si">#{</span><span class="vi">@deg</span><span class="si">}</span><span class="s2"> degrees&quot;</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">495</span><span class="p">);</span>
</span><span class='line'>    <span class="n">text</span><span class="p">(</span><span class="s2">&quot;DEPTH FPS: </span><span class="si">#{</span><span class="vi">@kinect</span><span class="o">.</span><span class="n">getDepthFPS</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="mi">640</span><span class="p">,</span><span class="mi">495</span><span class="p">);</span>
</span><span class='line'>    <span class="n">text</span><span class="p">(</span><span class="s2">&quot;Press &#39;d&#39; to enable/disable depth    Press &#39;r&#39; to enable/disable rgb image   Press &#39;i&#39; to enable/disable IR image (crashy!)   Press &#39;q&#39; to quit   UP and DOWN to tilt camera   Framerate: </span><span class="si">#{</span><span class="n">frame_rate</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">515</span><span class="p">);</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">toggle_rgb</span>
</span><span class='line'>    <span class="vi">@rgb</span> <span class="o">=</span> <span class="o">!</span><span class="vi">@rgb</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@ir</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="vi">@rgb</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableRGB</span><span class="p">(</span><span class="vi">@rgb</span><span class="p">);</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">toggle_ir</span>
</span><span class='line'>    <span class="vi">@ir</span> <span class="o">=</span> <span class="o">!</span><span class="vi">@ir</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@rgb</span> <span class="o">=</span> <span class="kp">false</span> <span class="k">if</span> <span class="vi">@ir</span><span class="p">;</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableIR</span><span class="p">(</span><span class="vi">@ir</span><span class="p">);</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tilt_up</span>
</span><span class='line'>    <span class="vi">@deg</span> <span class="o">=</span> <span class="vi">@deg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tilt_now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tilt_down</span>
</span><span class='line'>    <span class="vi">@deg</span> <span class="o">=</span> <span class="vi">@deg</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tilt_now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tilt_now</span>
</span><span class='line'>    <span class="vi">@deg</span> <span class="o">=</span> <span class="n">constrain</span><span class="p">(</span><span class="vi">@deg</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">30</span><span class="p">);</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">tilt</span><span class="p">(</span><span class="vi">@deg</span><span class="p">);</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">keyPressed</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s1">&#39;d&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@depth</span> <span class="o">=</span> <span class="o">!</span><span class="vi">@depth</span><span class="p">;</span>
</span><span class='line'>      <span class="vi">@kinect</span><span class="o">.</span><span class="n">enableDepth</span><span class="p">(</span><span class="vi">@depth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elsif</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">toggle_rgb</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elsif</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s1">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">toggle_ir</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">elsif</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="no">CODED</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">key_code</span> <span class="o">==</span> <span class="no">UP</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tilt_up</span>
</span><span class='line'>      <span class="k">elsif</span> <span class="p">(</span><span class="n">key_code</span> <span class="o">==</span> <span class="no">DOWN</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tilt_down</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">elsif</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="s1">&#39;q&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">stop</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stop</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@kinect</span><span class="o">.</span><span class="n">quit</span><span class="p">();</span>
</span><span class='line'>    <span class="k">super</span><span class="o">.</span><span class="n">stop</span>
</span><span class='line'>    <span class="c1"># exit</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And this is the beauty of the Ruby programming language! Even if you didn&rsquo;t know a thing about Ruby and the way it is structured, the code above is readable and easy to understand.</p>

<p>One thing to definitely note about this gem is its gracefully ungraceful way of crashing around 50% of the time when attempting to enable the IR mode:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/rp5_error.png" width="500" height="750"></p>

<p>Understandably, I guess some bugs still need to be worked out.</p>

<h3>Ruby-Freenect</h3>

<p>As is customary in the world today, there tend to be more than one way of doing things. Let&rsquo;s take a quick peek at some output from the Kinect via the <strong><a href="https://github.com/troystribling/ruby-freenect" title="Github of Ruby-Freenect gem">Ruby-Freenect</a></strong> gem:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/libfree_depth_rgb.png" width="750" height="1250"></p>

<p style="text-align:center;"> <strong>Ruby-Freenect: Depth Map with RGB </strong></p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/libfree_depth_ir.png" width="750" height="1250"></p>

<p style="text-align:center;"> <strong>Ruby-Freenect: Depth Map with InfraRed (IR) </strong></p>

<p>As you may have noticed, this Ruby gem outputs the depth map in a colored format based on distance. As you can see in the next picture, objects that are closer to the camera appear in a &lsquo;hotter&rsquo; color (black/red), while objects further away are a &lsquo;colder&rsquo; color (green/blue):</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/libfree_depth.png" width="750" height="1250"></p>

<p>Engaging this library package is done via the &lsquo;opengl&rsquo; command. I still have to do some exploration in order to find the code base. This gem also seems to lose packets, and does so in a more graceful &ldquo;I don&rsquo;t crash the entire program way.&rdquo;</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/libfree_packetloss_cmd.png" width="500" height="750">
<img src="http://carlosplusplus.github.io/images/posts/2013-06-30-hci-the-possibilities-are-endless/libfree_packetloss_img.png" width="500" height="750"></p>

<p>It is a bit interesting though &ndash; sometimes, the video feed gets stuck, and you see a combination of the three video feeds. Constantly hitting the video button will eventually restore the connection, which is nice. Failure output, while never good to see, also tells me that an issue occurred, which is better than nothing.</p>

<h2>The Future is Now</h2>

<p>My current plan is to explore the world of HCI via the Microsoft Kinect during my semester here at the Flatiron School. The exploration of this hardware interface, perhaps through gamification, will allow me to hopefully (1) contribute to open source and (2) understand the what is possible and what isn&rsquo;t.</p>

<p>Simply stated:</p>

<blockquote><p style="text-align:center;"><strong>The possibilities are endless.</strong></p></blockquote>

<p>Stay tuned for more information on the Kinect.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Dev, Sinatra, and Me]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/23/web-dev/"/>
    <updated>2013-06-23T23:36:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/23/web-dev</id>
    <content type="html"><![CDATA[<p>After three weeks of getting to know Ruby, me and my classmates have begun our conquest of the Web Dev world. Earlier this week, we were introduced to the basics of the Internet, learning about things like messaging structure and protocols.</p>

<h2>Racks on Racks on Racks</h2>

<p>The beginning of our exploration took us to <strong><a href="http://whatcodecraves.com/articles/2012/07/23/ruby-on-rack" title="What is Rack?">Rack</a></strong>, a simple and flexible library for building Ruby web applications and web frameworks. Learning this framework and its basics was particularly important, as we are now better poised to tame the dragon known as Sinatra.</p>

<h2>Sinatra (the Ruby framework, NOT the singer)</h2>

<p>While working at the lower levels of web dev may be a roaring good time, it turns out that there are other frameworks that exist which abstract functionality levels higher than Rack. Enter the Sinatra web framework, which is installed via the terminal:</p>

<pre><code>gem install sinatra
</code></pre>

<p>Many tutorials exist that discuss how Sinatra is to be used. Here are a few:</p>

<p style="text-align:center;"><strong><a href="http://titusd.co.uk/2010/04/07/a-beginners-sinatra-tutorial/">Beginner&rsquo;s tutorial for Sinatra</a></strong></p>

<p style="text-align:center;"><strong><a href="http://stackoverflow.com/questions/5015471/using-sinatra-for-larger-projects-via-multiple-files">General folder structure for Sinatra Apps</a></strong></p>

<p style="text-align:center;"><strong><a href="http://blog.chrisblunt.com/lightweight-web-apps-getting-started-with-sinatra/">Using Sinatra to start a simple Web App</a></strong></p>

<p>The Sinatra framework allows for straightforward generation of content and webpages via ERB (Embedded Ruby) and for simple routing that connects and joins the dynamically generated website. In terms of how the an application is laid out, let&rsquo;s look at a real-world example &ndash; the <strong><a href="http://fracture.it">Fracture.it</a></strong> website.</p>

<h2>Sinatra Layout of Fracture.it Website</h2>

<p>By navigating to the <strong><a href="http://fracture.it">Fracture.it</a></strong> website, one is brought to the index.html webpage, where the user can &ldquo;fracture&rdquo; a URL into a smaller URL. From this main website, one can fork the repository off which it was built and see the following layout:</p>

<pre><code>config - configuration files for website (e.g. database storage).
models - location to store classes and modules.
public - houses website details (e.g. fonts / images / css / js).
spec - area for testing (Rspec)
views - contains ERB templates for dynamic website viewing.
.gitignore - files that Git repo will ignore.
.rspec - contains .rspec file.
Gemfile - used with "rake bundle" to install all necessary gems. 
app.rb - contains the primary interface for the web application.
config.ru - allows you to run rackup command to launch web app.
</code></pre>

<p>As you can see, the organization of this Github repository allows for one to see exactly and precisely the files that construct a Sinatra folder structure. In fact, most Sinatra repositories are laid out the same way, allowing for standardization and for easy reading.</p>

<p>Looking forward to doing my own Sinatra development in the near future!</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code to Joy]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/16/code-to-joy/"/>
    <updated>2013-06-16T13:16:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/16/code-to-joy</id>
    <content type="html"><![CDATA[<p>In the search to educate myself a bit more on Ruby principles, both procedural and technical, I came upon a presentation by Avdi Grimm (<strong><a href="https://speakerdeck.com/avdi" title="SpeakerDeck Website for avdi">avdi</a></strong>) on <strong><a href="http://speaderdeck.com" title="SpeakerDeck">SpeakerDeck</a></strong>.</p>

<p>These slide decks goes into things I&rsquo;m passionate about when it comes to programming:</p>

<pre><code>- Sharing your happiness of coding with others.
- Constantly exploring the possibilities of programming.
- Trying new things and getting messy.
</code></pre>

<p>In this day and age, it is my firm belief that we, as programmers, are our own best source of motivation. Through constant exploration and profound expressiveness of programming languages, it is within our power to shape the world as we know it today.</p>

<h2>Joyful, Joyful We Adore Thee (Ruby)</h2>

<p>In <strong><a href="http://www.twitter.com/avdi" title="Avdi Grimm's Twitter">@avdi</a></strong>&rsquo;s slide deck, <strong>Code to Joy</strong>, he discusses many things about the Ruby programming language that he loves. He begins first by staying that both his job and that ruby is awesome, stating:</p>

<blockquote><p style="text-align:center;">It (Ruby) still finds ways to make me smile after all these years.</p></blockquote>

<p>Avdi then goes into the Ruby language and standard library, calling out a few of his favorite idioms and tools. Reading through these was a great learning experience (given my current n00b status with Ruby itself). Here&rsquo;s are a few things I learned:</p>

<ul>
<li>Functions can have multiple <code>return</code> values:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">sum_diff</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="mo">002</span><span class="o">?&gt;</span>   <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,</span><span class="n">x</span><span class="o">-</span><span class="n">y</span>
</span><span class='line'><span class="mo">003</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mo">004</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span> <span class="o">=</span> <span class="n">sum_diff</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mo">005</span> <span class="o">&gt;</span> <span class="n">a</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">8</span>
</span><span class='line'><span class="mo">006</span> <span class="o">&gt;</span> <span class="n">b</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The ability to access the local file structure:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">001</span> <span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;pathname&#39;</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="mo">002</span> <span class="o">&gt;</span> <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s1">&#39;/Users/carloslazo/Development/FlatironSchool&#39;</span><span class="p">)</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="mi">0</span>
</span><span class='line'><span class="mo">003</span> <span class="o">&gt;</span> <span class="no">Pathname</span><span class="o">.</span><span class="n">pwd</span><span class="o">.</span><span class="n">ascend</span><span class="p">{</span><span class="o">|</span><span class="n">dir</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">dir</span><span class="p">}</span>
</span><span class='line'><span class="c1"># /Users/carloslazo/Development/FlatironSchool</span>
</span><span class='line'><span class="c1"># /Users/carloslazo/Development</span>
</span><span class='line'><span class="c1"># /Users/carloslazo</span>
</span><span class='line'><span class="c1"># /Users</span>
</span><span class='line'><span class="c1"># /</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The concept of <code>ensure</code> in <code>enumerable lists</code>:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">names</span>
</span><span class='line'><span class="mo">002</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Carlos&#39;</span>
</span><span class='line'><span class="mo">003</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Dan&#39;</span>
</span><span class='line'><span class="mo">004</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Sagar&#39;</span>
</span><span class='line'><span class="mo">005</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Thomas&#39;</span>
</span><span class='line'><span class="mo">006</span><span class="o">?&gt;</span>   <span class="k">ensure</span>
</span><span class='line'><span class="mo">007</span> <span class="o">&gt;</span>     <span class="nb">puts</span> <span class="s2">&quot;Avi&quot;</span>
</span><span class='line'><span class="mo">00</span><span class="mi">8</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mo">00</span><span class="mi">9</span> <span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">names</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'><span class="mo">011</span> <span class="o">&gt;</span>     <span class="nb">puts</span> <span class="nb">name</span>
</span><span class='line'><span class="mo">012</span><span class="o">?&gt;</span>   <span class="k">break</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">013</span><span class="o">?&gt;</span>   <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="mo">014</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="c1"># Carlos</span>
</span><span class='line'><span class="c1"># Dan</span>
</span><span class='line'><span class="c1"># Avi</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>The ability to <code>break</code> with a value:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mo">001</span> <span class="o">&gt;</span> <span class="k">def</span> <span class="nf">names</span>
</span><span class='line'><span class="mo">002</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Carlos&#39;</span>
</span><span class='line'><span class="mo">003</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Dan&#39;</span>
</span><span class='line'><span class="mo">004</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Sagar&#39;</span>
</span><span class='line'><span class="mo">005</span><span class="o">?&gt;</span>   <span class="k">yield</span> <span class="s1">&#39;Thomas&#39;</span>
</span><span class='line'><span class="mo">006</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="mo">007</span> <span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">names</span> <span class="k">do</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span>
</span><span class='line'><span class="mo">00</span><span class="mi">8</span> <span class="o">&gt;</span>     <span class="k">break</span> <span class="nb">name</span> <span class="k">if</span> <span class="nb">name</span> <span class="o">=~</span> <span class="sr">/^S/</span>
</span><span class='line'><span class="mo">00</span><span class="mi">9</span><span class="o">?&gt;</span>   <span class="k">end</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Sagar&quot;</span>
</span><span class='line'><span class="mo">010</span> <span class="o">&gt;</span> <span class="n">result</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;Sagar&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Be Confident in your Ruby</h2>

<p>The remainder of the technical topics went over my head, as my level of Ruby knowledge is not there yet.  One thing I <strong>can</strong> understand is the crux of Avdi&rsquo;s advice:</p>

<blockquote><p style="text-align:center;">Practice joyful coding.</p></blockquote>

<p>All in all, there is no rubric to tell you what is considered &ldquo;joyful coding&rdquo; in this world. Spread knowledge to those around you, always. Inspire through example and by teaching what you know. Cherish those &ldquo;A-HA&rdquo; moments, both when you have them and when you witness them in others. The world of coding, and the world in general, will be a better place for it.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Road to Ruby from C++]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/13/the-road-to-ruby-from-c-plus-plus/"/>
    <updated>2013-06-13T14:42:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/13/the-road-to-ruby-from-c-plus-plus</id>
    <content type="html"><![CDATA[<p>Me, myself, and C++ &ndash; my &ldquo;first&rdquo; programming language.</p>

<h2>My Life and C++</h2>

<p>Since 10th grade of high school, I&rsquo;ve been programming in C++. Whether in school or in my previous life as an engineer working for the DoD, it&rsquo;s the programming language I&rsquo;ve grown to know the best. At this point, the structure and syntax just feels right, and although I&rsquo;ve programmed in other languages, C++ has always been my strong point.</p>

<p>Enter the Flatiron School, whose primary focus is to teach me to be a full stack web developer. The language of choice here is Ruby, one of the rising programming languages in the web development world. It&rsquo;s been a battle these past 2 weeks working with Ruby given my background in C++. Forcing yourself to detach from one mindset you&rsquo;ve been used to for so long is always a challenge.</p>

<p>While I could syntactically see the differences between C++ and Ruby, I thought it would be an awesome idea to pick a simple programming problem, implement the same solution with both programming languages, and quantify the results.</p>

<h2>A Wild &ldquo;HISTOGRAM&rdquo; Has Appeared!</h2>

<p>The problem of choice was to develop a simple solution that calculates the <strong>HISTOGRAM</strong>, or frequency, of words that appear in a simple sting. I purposefully made the output from both programs identical so one can see that they do the same thing:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-13-the-road-to-ruby-from-c-plus-plus/C++_v_Ruby.png" width="700" height="1000"></p>

<p style="text-align:center;"> Great &ndash; the output from the programs is the same. But now, it&rsquo;s time to analyze the code.</p>

<h2>C++ vs. Ruby &ndash; Whose Code Cuisine Reigns Supreme?</h2>

<p>This analysis is predicated on a few assumptions:</p>

<pre><code>- Using basic C++ / Ruby structures (e.g. no classes).
- Using current knowledge of Ruby programming language (9 days worth).
</code></pre>

<p>Here is my implementation of a histogram in C++:</p>

<figure class='code'><figcaption><span>Histogram function in C++ (histogram.cpp)</span> <a href='http://carlosplusplus.github.io/code/2013-06-13-the-road-to-ruby-from-c-plus-plus/histogram.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// Histogram with C++</span>
</span><span class='line'><span class="c1">//  {compile} --&gt; g++ histogram.cpp -o histogram</span>
</span><span class='line'><span class="c1">//  {run}     --&gt; ./histogram</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;map&gt;        </span><span class="c1">// STD map</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;     </span><span class="c1">// STD string</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;     </span><span class="c1">// STD vector</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;   </span><span class="c1">// STD I/O</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;    </span><span class="c1">// StringStream</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="cm">/* Declare all variables for program. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="n">buffer</span><span class="p">,</span> <span class="n">sentence</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">words</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">get_freq</span><span class="p">;</span>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">iter1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;</span> <span class="n">frequency</span><span class="p">;</span>
</span><span class='line'>  <span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">string</span><span class="o">&gt;::</span><span class="n">reverse_iterator</span> <span class="n">iter2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Setup sentence for frequency analysis. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sentence</span> <span class="o">=</span> <span class="s">&quot;this test of is a a this test phrase of is a of a of a test&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Test sentence for histogram is:</span><span class="se">\n\t</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">sentence</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Perform string split via stringstream. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">stringstream</span> <span class="n">ss</span><span class="p">(</span><span class="n">sentence</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">ss</span> <span class="o">&gt;&gt;</span> <span class="n">buffer</span><span class="p">)</span>
</span><span class='line'>    <span class="n">words</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Calculate frequency of words via the map. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">words</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">// If word does not exist, add it to the map.</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">get_freq</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">==</span> <span class="n">get_freq</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="n">get_freq</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">get_freq</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Create a second map with K-V pairs flipped so it is sorted. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set values from first map to keys of second map.</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">iter1</span> <span class="o">=</span> <span class="n">get_freq</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">iter1</span> <span class="o">!=</span> <span class="n">get_freq</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">iter1</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">frequency</span><span class="p">[</span><span class="n">iter1</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="n">iter1</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* Print out frequency map in reverse order as &quot;V-K&quot; pairs in output. */</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">Frequency table of sentence is:</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">iter2</span> <span class="o">=</span> <span class="n">frequency</span><span class="p">.</span><span class="n">rbegin</span><span class="p">();</span> <span class="n">iter2</span> <span class="o">!=</span> <span class="n">frequency</span><span class="p">.</span><span class="n">rend</span><span class="p">();</span> <span class="n">iter2</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, count = &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">iter2</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">C++ program is DONE.</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is my implementation of a histogram in Ruby:</p>

<figure class='code'><figcaption><span>Histogram function in Ruby (histogram.rb)</span> <a href='http://carlosplusplus.github.io/code/2013-06-13-the-road-to-ruby-from-c-plus-plus/histogram.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Histogram with Ruby</span>
</span><span class='line'><span class="c1">#//  {run}     --&gt; ruby histogram.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">sentence</span>    <span class="o">=</span> <span class="s2">&quot;this test of is a a this test phrase of is a of a of a test&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Test sentence for histogram is:</span><span class="se">\n\t</span><span class="si">#{</span><span class="n">sentence</span><span class="si">}</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">words</span>       <span class="o">=</span> <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">frequencies</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">w</span><span class="o">|</span> <span class="n">frequencies</span><span class="o">[</span><span class="n">w</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">frequencies</span> <span class="o">=</span> <span class="n">frequencies</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="p">}</span>
</span><span class='line'><span class="n">frequencies</span><span class="o">.</span><span class="n">reverse!</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Frequency table of sentence is:</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">frequencies</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="o">|</span> <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">, count = </span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">Ruby program is DONE.</span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To analyze the code, I created six (6) criteria on which I&rsquo;ll be &ldquo;judging&rdquo; the languages.</p>

<p><strong>DATA</strong> = Unique Data Structures<br/>
<strong>LIBR</strong> = Libraries Imported (Non Default)<br/>
<strong>LOFC</strong> = Lines of Code (Functional; e.g. no prints, var declarations)<br/>
<strong>LOOP</strong> = Explicit Loops [O(n)]<br/>
<strong>READ</strong> = Readability : 1 => n00b, 10 => t3h w!nZ<br/>
<strong>VARS</strong> = Unique Variables</p>

<p style="text-align:center;"> <strong>Histogram Comparison : C++ vs Ruby.</strong></p>

<table>
<thead>
<tr>
<th></th>
<th align="center"><strong>Language</strong></th>
<th align="center"><code>C++</code></th>
<th align="center"><code>Ruby</code></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center">DATA</td>
<td align="center">06</td>
<td align="center"><strong>02</strong></td>
</tr>
<tr>
<td></td>
<td align="center">LIBR</td>
<td align="center">05</td>
<td align="center"><strong>00</strong></td>
</tr>
<tr>
<td></td>
<td align="center">LOFC</td>
<td align="center">13</td>
<td align="center"><strong>07</strong></td>
</tr>
<tr>
<td></td>
<td align="center">LOOP</td>
<td align="center">04</td>
<td align="center"><strong>02</strong></td>
</tr>
<tr>
<td></td>
<td align="center">READ</td>
<td align="center">-1</td>
<td align="center"><strong>10</strong></td>
</tr>
<tr>
<td></td>
<td align="center">VARS</td>
<td align="center">08</td>
<td align="center"><strong>03</strong>  </td>
</tr>
</tbody>
</table>


<p style="text-align:center;"> The clear victor, under these set of criteria, is <strong>RUBY</strong>.</p>

<h2>Final Thoughts</h2>

<p>Understandably, all programming languages have their advantages and disadvantages. The embedded systems world loves C++ and its ability to easily access lower levels of the stack and hardware in general.</p>

<p>In terms of general ease of learning and forgiveness, it&rsquo;s <strong>Ruby</strong> all the way. For those that also come from a C / C++ background, here&rsquo;s a <strong><a href="http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-c-and-c-/" title="Transitioning from C / C++ --&gt; Ruby">cool website</a></strong> that talks about transitioning from C / C++ &mdash;> Ruby.</p>

<p style="text-align:center;"> <strong>10 days of Ruby vs. 10 years of C++</strong></p>

<p>Ruby, you&rsquo;ve won over my &lt;3 already, &amp; we&rsquo;ve only just begun getting to know each other.</p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The World of Startups w/ Matt Hackett]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/12/the-world-of-startups-w-slash-matt-hackett/"/>
    <updated>2013-06-12T20:00:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/12/the-world-of-startups-w-slash-matt-hackett</id>
    <content type="html"><![CDATA[<p>On Thursday, June 6th, 2013, me and my current classmates here at the Flatiron School were given the unique opportunity to hear from and be inspired by <strong>Matt Hackett</strong>.</p>

<h2>Who is Matt Hackett?</h2>

<p>Who is Matt Hackett you ask? Here&rsquo;s a brief summary from his <strong><a href="http://matthackett.net/" title="Website of Matt Hackett">website</a></strong>:</p>

<blockquote><p>I obsess over the engineering and dissemination of technology for creative people.</p></blockquote>

<hr />

<blockquote><p>I&rsquo;m happily torn between work on visible (marketing) and invisible (architecture, management) components of media-product-making machinery.</p></blockquote>

<hr />

<blockquote><p>Most recently, I spent 2 &frac12; years at Tumblr as VP Engineering and later Head of Brand Strategy, as we grew the platform from a monthly audience of 25 million to 150 million people around the world.</p></blockquote>

<p>And here&rsquo;s a picture of him at our very own campus here at the Flatiron School:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-12-the-world-of-startups-w-slash-matt-hackett/matthackett_pic1.png" width="300" height="450"></p>

<p style="text-align:center;"> <strong>You can almost taste the happy.</strong></p>

<p style="text-align:center;"> Matt visited us and shared his insight into the startup world.</p>

<h2>A Simple Breakdown of Startup Phases</h2>

<p>Matt was able to break down startups into five distinct phases:</p>

<p style="text-align:center;"> <img src="http://carlosplusplus.github.io/images/posts/2013-06-12-the-world-of-startups-w-slash-matt-hackett/matthackett_pic2.png" width="300" height="450"></p>

<h3>1 &ndash;> Pre-Funding</h3>

<ul>
<li>Team is incredibly small (e.g. 1-3 people).</li>
<li>Willingness to take on lots of risk to explore idea.</li>
<li>OK with being unpaid and potentially contributing persona funds.</li>
<li>&ldquo;Just get something done&rdquo; attitude.</li>
</ul>


<h3>2 &ndash;> Early Team</h3>

<ul>
<li>Success at an early team place is based upon two main things:

<ul>
<li>Awareness of the environment &ndash; knowing where you at.</li>
<li>Willingness to adapt to change and take on new direction.</li>
</ul>
</li>
<li>Experience isn&rsquo;t necessarily required: &ldquo;can-do, will-do&rdquo; attitude.</li>
<li>Constantly checking in with the team is extremely important:

<ul>
<li>Is my vision aligned with the rest of the team?</li>
<li>Am I doing things right?</li>
</ul>
</li>
<li>Focus on agile development and continual process improvement.</li>
<li>Cultural fit is the biggest part of this stage.</li>
<li>How excited are you about the product itself?</li>
</ul>


<h3>3 &ndash;> Growth</h3>

<ul>
<li>Cultural fit isn&rsquo;t as emphasized as much; things are more team based.</li>
<li>Passion still helps in getting hired, but having skills is most important.</li>
<li>Expect more technical interviewing along with 30min pre-interview phone calls.

<ul>
<li>Pre-interview coding is fairly regular (e.g. 1-3 hours of pre-work).</li>
</ul>
</li>
<li>Important to start finding your own specialty within the code base and product.

<ul>
<li>Focusing on breadth vs. depth is the key.</li>
<li>Knowledge and skills will become critical as team scales at a greater pace.</li>
</ul>
</li>
</ul>


<h3>4 &ndash;> Hypergrowth</h3>

<ul>
<li>Specialization is the most important given the rate at which the company is growing.</li>
<li>Incredibly specific hiring process is enforced (for specialization).</li>
<li>Overall time-line to reach this spot is around 1-2 years since the Early Team phase.</li>
</ul>


<h3>5 &ndash;> Mature Company</h3>

<ul>
<li>Output from hypergrowth leads into a mature company &ndash; specialization is still important.</li>
<li>This is the stage where &ldquo;traditional&rdquo; things like performance reviews begin to show up.</li>
<li>One of the main goals it to get bought out by a larger company and GET PAID.</li>
</ul>


<h2>Closing Thoughts</h2>

<p>Matt&rsquo;s overall recommendation was for us Flatiron School students, future web developers here in New York City and elsewhere, is to target startups in the <strong>Early Team</strong> and <strong>Growth</strong> phases of development. This would give us all enough time to find our place, both learn new skills and hone current ones, and be part of something amazing.</p>

<p>He also mentioned that as junior developers looking to work at startups, we need to find companies where we feel passionate about the product. Matt encourages us to never settle and to find the company that fits <strong>our own</strong> requirements for culture.</p>

<p>Taking a position at a more mature company also isn&rsquo;t a bad idea, as you can &ldquo;learn the ropes&rdquo; before you dive into the deep end of startup culture.</p>

<p style="text-align:center;"> <strong>Thank you for imparting your wisdom, Matt!</strong></p>

<p>CJL</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Hello World" - My Journey to Awesome]]></title>
    <link href="http://carlosplusplus.github.io/blog/2013/06/09/hello-world-my-journey-to-awesome/"/>
    <updated>2013-06-09T20:00:00-04:00</updated>
    <id>http://carlosplusplus.github.io/blog/2013/06/09/hello-world-my-journey-to-awesome</id>
    <content type="html"><![CDATA[<p>On Monday, June 3rd, my life changes again for the best. I&rsquo;ve begun my 12 week journey at the Flatiron School. Can&rsquo;t wait to see me before / after this glorious code retreat of sorts. Stay tuned for some awesome blog posts on a variety of topics going forward.</p>

<p>CJL</p>
]]></content>
  </entry>
  
</feed>
